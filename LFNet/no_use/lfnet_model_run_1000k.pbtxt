node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "moments/mean"
  op: "Mean"
  input: "Placeholder"
  input: "moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "moments/StopGradient"
  op: "StopGradient"
  input: "moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "moments/SquaredDifference"
  op: "SquaredDifference"
  input: "Placeholder"
  input: "moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "moments/variance"
  op: "Mean"
  input: "moments/SquaredDifference"
  input: "moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batchnorm/add"
  op: "Add"
  input: "moments/variance"
  input: "batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batchnorm/mul"
  op: "Mul"
  input: "Placeholder"
  input: "batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batchnorm/Neg"
  op: "Neg"
  input: "moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batchnorm/mul_1"
  op: "Mul"
  input: "batchnorm/Neg"
  input: "batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batchnorm/add_1"
  op: "Add"
  input: "batchnorm/mul"
  input: "batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Shape"
  op: "Shape"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice"
  op: "StridedSlice"
  input: "MSDeepDet/Shape"
  input: "MSDeepDet/strided_slice/stack"
  input: "MSDeepDet/strided_slice/stack_1"
  input: "MSDeepDet/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/Shape_1"
  op: "Shape"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_1"
  op: "StridedSlice"
  input: "MSDeepDet/Shape_1"
  input: "MSDeepDet/strided_slice_1/stack"
  input: "MSDeepDet/strided_slice_1/stack_1"
  input: "MSDeepDet/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/Shape_2"
  op: "Shape"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_2"
  op: "StridedSlice"
  input: "MSDeepDet/Shape_2"
  input: "MSDeepDet/strided_slice_2/stack"
  input: "MSDeepDet/strided_slice_2/stack_1"
  input: "MSDeepDet/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Identity"
  op: "Identity"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/init_conv/weights"
  input: "ConvOnlyResNet/init_conv/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/init_conv/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/init_conv/biases"
  input: "ConvOnlyResNet/init_conv/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/init_conv/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/init_conv/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/init_conv/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/init_conv/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/init_conv/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/init_conv/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/init_conv/weights/tag"
  input: "ConvOnlyResNet/init_conv/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/init_conv/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/init_conv/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/init_conv/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/init_conv/biases/tag"
  input: "ConvOnlyResNet/init_conv/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/init_conv/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/Identity"
  input: "ConvOnlyResNet/init_conv/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/init_conv/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/init_conv/Conv2D"
  input: "ConvOnlyResNet/init_conv/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/gamma/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/pre-bn/gamma"
  input: "ConvOnlyResNet/block-1/pre-bn/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/gamma/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/pre-bn/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/gamma"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/beta/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/pre-bn/beta"
  input: "ConvOnlyResNet/block-1/pre-bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/beta/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/pre-bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/beta"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/moving_mean/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/pre-bn/moving_mean"
  input: "ConvOnlyResNet/block-1/pre-bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/moving_mean/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/pre-bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/moving_mean"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/moving_variance/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/pre-bn/moving_variance"
  input: "ConvOnlyResNet/block-1/pre-bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/pre-bn/moving_variance/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/pre-bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/pre-bn/moving_variance"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/pre-bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MSDeepDet/ConvOnlyResNet/init_conv/BiasAdd"
  input: "ConvOnlyResNet/block-1/pre-bn/gamma/read"
  input: "ConvOnlyResNet/block-1/pre-bn/beta/read"
  input: "ConvOnlyResNet/block-1/pre-bn/moving_mean/read"
  input: "ConvOnlyResNet/block-1/pre-bn/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/pre-bn/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu/alpha"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu/alpha"
  input: "MSDeepDet/ConvOnlyResNet/block-1/pre-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu/Maximum"
  op: "Maximum"
  input: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu/mul"
  input: "MSDeepDet/ConvOnlyResNet/block-1/pre-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/conv1/weights"
  input: "ConvOnlyResNet/block-1/conv1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/conv1/biases"
  input: "ConvOnlyResNet/block-1/conv1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv1/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/conv1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv1/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv1/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-1/conv1/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv1/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-1/conv1/weights/tag"
  input: "ConvOnlyResNet/block-1/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv1/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-1/conv1/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv1/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-1/conv1/biases/tag"
  input: "ConvOnlyResNet/block-1/conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv1/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu/Maximum"
  input: "ConvOnlyResNet/block-1/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv1/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/block-1/conv1/Conv2D"
  input: "ConvOnlyResNet/block-1/conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/gamma/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/mid-bn/gamma"
  input: "ConvOnlyResNet/block-1/mid-bn/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/gamma/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/mid-bn/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/gamma"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/beta/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/mid-bn/beta"
  input: "ConvOnlyResNet/block-1/mid-bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/beta/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/mid-bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/beta"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/moving_mean/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/mid-bn/moving_mean"
  input: "ConvOnlyResNet/block-1/mid-bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/moving_mean/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/mid-bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/moving_mean"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/moving_variance/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/mid-bn/moving_variance"
  input: "ConvOnlyResNet/block-1/mid-bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/mid-bn/moving_variance/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/mid-bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/mid-bn/moving_variance"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/mid-bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MSDeepDet/ConvOnlyResNet/block-1/conv1/BiasAdd"
  input: "ConvOnlyResNet/block-1/mid-bn/gamma/read"
  input: "ConvOnlyResNet/block-1/mid-bn/beta/read"
  input: "ConvOnlyResNet/block-1/mid-bn/moving_mean/read"
  input: "ConvOnlyResNet/block-1/mid-bn/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/mid-bn/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu_1/alpha"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu_1/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu_1/alpha"
  input: "MSDeepDet/ConvOnlyResNet/block-1/mid-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu_1/Maximum"
  op: "Maximum"
  input: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu_1/mul"
  input: "MSDeepDet/ConvOnlyResNet/block-1/mid-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/conv2/weights"
  input: "ConvOnlyResNet/block-1/conv2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-1/conv2/biases"
  input: "ConvOnlyResNet/block-1/conv2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-1/conv2/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-1/conv2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-1/conv2/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv2/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-1/conv2/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv2/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-1/conv2/weights/tag"
  input: "ConvOnlyResNet/block-1/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv2/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-1/conv2/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv2/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-1/conv2/biases/tag"
  input: "ConvOnlyResNet/block-1/conv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv2/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/block-1/LeakyRelu_1/Maximum"
  input: "ConvOnlyResNet/block-1/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/conv2/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/block-1/conv2/Conv2D"
  input: "ConvOnlyResNet/block-1/conv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-1/add"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/block-1/conv2/BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/init_conv/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/gamma/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/pre-bn/gamma"
  input: "ConvOnlyResNet/block-2/pre-bn/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/gamma/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/pre-bn/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/gamma"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/beta/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/pre-bn/beta"
  input: "ConvOnlyResNet/block-2/pre-bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/beta/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/pre-bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/beta"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/moving_mean/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/pre-bn/moving_mean"
  input: "ConvOnlyResNet/block-2/pre-bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/moving_mean/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/pre-bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/moving_mean"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/moving_variance/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/pre-bn/moving_variance"
  input: "ConvOnlyResNet/block-2/pre-bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/pre-bn/moving_variance/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/pre-bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/pre-bn/moving_variance"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/pre-bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MSDeepDet/ConvOnlyResNet/block-1/add"
  input: "ConvOnlyResNet/block-2/pre-bn/gamma/read"
  input: "ConvOnlyResNet/block-2/pre-bn/beta/read"
  input: "ConvOnlyResNet/block-2/pre-bn/moving_mean/read"
  input: "ConvOnlyResNet/block-2/pre-bn/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/pre-bn/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu/alpha"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu/alpha"
  input: "MSDeepDet/ConvOnlyResNet/block-2/pre-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu/Maximum"
  op: "Maximum"
  input: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu/mul"
  input: "MSDeepDet/ConvOnlyResNet/block-2/pre-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/conv1/weights"
  input: "ConvOnlyResNet/block-2/conv1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/conv1/biases"
  input: "ConvOnlyResNet/block-2/conv1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv1/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/conv1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv1/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv1/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-2/conv1/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv1/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-2/conv1/weights/tag"
  input: "ConvOnlyResNet/block-2/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv1/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-2/conv1/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv1/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-2/conv1/biases/tag"
  input: "ConvOnlyResNet/block-2/conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv1/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu/Maximum"
  input: "ConvOnlyResNet/block-2/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv1/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/block-2/conv1/Conv2D"
  input: "ConvOnlyResNet/block-2/conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/gamma/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/mid-bn/gamma"
  input: "ConvOnlyResNet/block-2/mid-bn/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/gamma/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/mid-bn/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/gamma"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/beta/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/mid-bn/beta"
  input: "ConvOnlyResNet/block-2/mid-bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/beta/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/mid-bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/beta"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/moving_mean/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/mid-bn/moving_mean"
  input: "ConvOnlyResNet/block-2/mid-bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/moving_mean/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/mid-bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/moving_mean"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/moving_variance/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/mid-bn/moving_variance"
  input: "ConvOnlyResNet/block-2/mid-bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/mid-bn/moving_variance/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/mid-bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/mid-bn/moving_variance"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/mid-bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MSDeepDet/ConvOnlyResNet/block-2/conv1/BiasAdd"
  input: "ConvOnlyResNet/block-2/mid-bn/gamma/read"
  input: "ConvOnlyResNet/block-2/mid-bn/beta/read"
  input: "ConvOnlyResNet/block-2/mid-bn/moving_mean/read"
  input: "ConvOnlyResNet/block-2/mid-bn/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/mid-bn/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu_1/alpha"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu_1/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu_1/alpha"
  input: "MSDeepDet/ConvOnlyResNet/block-2/mid-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu_1/Maximum"
  op: "Maximum"
  input: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu_1/mul"
  input: "MSDeepDet/ConvOnlyResNet/block-2/mid-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/conv2/weights"
  input: "ConvOnlyResNet/block-2/conv2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-2/conv2/biases"
  input: "ConvOnlyResNet/block-2/conv2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-2/conv2/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-2/conv2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-2/conv2/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv2/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-2/conv2/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv2/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-2/conv2/weights/tag"
  input: "ConvOnlyResNet/block-2/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv2/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-2/conv2/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv2/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-2/conv2/biases/tag"
  input: "ConvOnlyResNet/block-2/conv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv2/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/block-2/LeakyRelu_1/Maximum"
  input: "ConvOnlyResNet/block-2/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/conv2/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/block-2/conv2/Conv2D"
  input: "ConvOnlyResNet/block-2/conv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-2/add"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/block-2/conv2/BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/block-1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/gamma/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/pre-bn/gamma"
  input: "ConvOnlyResNet/block-3/pre-bn/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/gamma/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/pre-bn/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/gamma"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/beta/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/pre-bn/beta"
  input: "ConvOnlyResNet/block-3/pre-bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/beta/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/pre-bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/beta"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/moving_mean/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/pre-bn/moving_mean"
  input: "ConvOnlyResNet/block-3/pre-bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/moving_mean/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/pre-bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/moving_mean"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/moving_variance/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/pre-bn/moving_variance"
  input: "ConvOnlyResNet/block-3/pre-bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/pre-bn/moving_variance/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/pre-bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/pre-bn/moving_variance"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/pre-bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MSDeepDet/ConvOnlyResNet/block-2/add"
  input: "ConvOnlyResNet/block-3/pre-bn/gamma/read"
  input: "ConvOnlyResNet/block-3/pre-bn/beta/read"
  input: "ConvOnlyResNet/block-3/pre-bn/moving_mean/read"
  input: "ConvOnlyResNet/block-3/pre-bn/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/pre-bn/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu/alpha"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu/alpha"
  input: "MSDeepDet/ConvOnlyResNet/block-3/pre-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu/Maximum"
  op: "Maximum"
  input: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu/mul"
  input: "MSDeepDet/ConvOnlyResNet/block-3/pre-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/conv1/weights"
  input: "ConvOnlyResNet/block-3/conv1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/conv1/biases"
  input: "ConvOnlyResNet/block-3/conv1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv1/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/conv1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv1/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv1/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-3/conv1/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv1/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-3/conv1/weights/tag"
  input: "ConvOnlyResNet/block-3/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv1/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-3/conv1/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv1/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-3/conv1/biases/tag"
  input: "ConvOnlyResNet/block-3/conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv1/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu/Maximum"
  input: "ConvOnlyResNet/block-3/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv1/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/block-3/conv1/Conv2D"
  input: "ConvOnlyResNet/block-3/conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/gamma/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/mid-bn/gamma"
  input: "ConvOnlyResNet/block-3/mid-bn/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/gamma/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/mid-bn/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/gamma"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/beta/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/mid-bn/beta"
  input: "ConvOnlyResNet/block-3/mid-bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/beta/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/mid-bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/beta"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/moving_mean/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/mid-bn/moving_mean"
  input: "ConvOnlyResNet/block-3/mid-bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/moving_mean/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/mid-bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/moving_mean"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/moving_variance/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/mid-bn/moving_variance"
  input: "ConvOnlyResNet/block-3/mid-bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/mid-bn/moving_variance/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/mid-bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/mid-bn/moving_variance"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/mid-bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MSDeepDet/ConvOnlyResNet/block-3/conv1/BiasAdd"
  input: "ConvOnlyResNet/block-3/mid-bn/gamma/read"
  input: "ConvOnlyResNet/block-3/mid-bn/beta/read"
  input: "ConvOnlyResNet/block-3/mid-bn/moving_mean/read"
  input: "ConvOnlyResNet/block-3/mid-bn/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/mid-bn/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu_1/alpha"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu_1/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu_1/alpha"
  input: "MSDeepDet/ConvOnlyResNet/block-3/mid-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu_1/Maximum"
  op: "Maximum"
  input: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu_1/mul"
  input: "MSDeepDet/ConvOnlyResNet/block-3/mid-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/conv2/weights"
  input: "ConvOnlyResNet/block-3/conv2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/block-3/conv2/biases"
  input: "ConvOnlyResNet/block-3/conv2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/block-3/conv2/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/block-3/conv2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/block-3/conv2/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv2/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-3/conv2/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv2/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-3/conv2/weights/tag"
  input: "ConvOnlyResNet/block-3/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv2/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/block-3/conv2/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv2/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/block-3/conv2/biases/tag"
  input: "ConvOnlyResNet/block-3/conv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv2/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/block-3/LeakyRelu_1/Maximum"
  input: "ConvOnlyResNet/block-3/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/conv2/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/block-3/conv2/Conv2D"
  input: "ConvOnlyResNet/block-3/conv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/block-3/add"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/block-3/conv2/BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/block-2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/gamma/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/fin-bn/gamma"
  input: "ConvOnlyResNet/fin-bn/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/gamma/read"
  op: "Identity"
  input: "ConvOnlyResNet/fin-bn/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/gamma"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/beta/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/fin-bn/beta"
  input: "ConvOnlyResNet/fin-bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/beta/read"
  op: "Identity"
  input: "ConvOnlyResNet/fin-bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/beta"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/moving_mean/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/fin-bn/moving_mean"
  input: "ConvOnlyResNet/fin-bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/moving_mean/read"
  op: "Identity"
  input: "ConvOnlyResNet/fin-bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/moving_mean"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/moving_variance/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/fin-bn/moving_variance"
  input: "ConvOnlyResNet/fin-bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/fin-bn/moving_variance/read"
  op: "Identity"
  input: "ConvOnlyResNet/fin-bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/fin-bn/moving_variance"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/fin-bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MSDeepDet/ConvOnlyResNet/block-3/add"
  input: "ConvOnlyResNet/fin-bn/gamma/read"
  input: "ConvOnlyResNet/fin-bn/beta/read"
  input: "ConvOnlyResNet/fin-bn/moving_mean/read"
  input: "ConvOnlyResNet/fin-bn/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/fin-bn/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/LeakyRelu/alpha"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/LeakyRelu/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/alpha"
  input: "MSDeepDet/ConvOnlyResNet/fin-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/LeakyRelu/Maximum"
  op: "Maximum"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/mul"
  input: "MSDeepDet/ConvOnlyResNet/fin-bn/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Identity_1"
  op: "Identity"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Shape"
  op: "Shape"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/strided_slice"
  op: "StridedSlice"
  input: "MSDeepDet/ConvOnlyResNet/Shape"
  input: "MSDeepDet/ConvOnlyResNet/strided_slice/stack"
  input: "MSDeepDet/ConvOnlyResNet/strided_slice/stack_1"
  input: "MSDeepDet/ConvOnlyResNet/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/ToFloat"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Shape_1"
  op: "Shape"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/strided_slice_1"
  op: "StridedSlice"
  input: "MSDeepDet/ConvOnlyResNet/Shape_1"
  input: "MSDeepDet/ConvOnlyResNet/strided_slice_1/stack"
  input: "MSDeepDet/ConvOnlyResNet/strided_slice_1/stack_1"
  input: "MSDeepDet/ConvOnlyResNet/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/ToFloat_1"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/strided_slice_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ToFloat"
  input: "MSDeepDet/ConvOnlyResNet/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/mul"
  input: "MSDeepDet/ConvOnlyResNet/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Cast"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/add"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_1"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ToFloat_1"
  input: "MSDeepDet/ConvOnlyResNet/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_1"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/mul_1"
  input: "MSDeepDet/ConvOnlyResNet/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Cast_1"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/add_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/stack"
  op: "Pack"
  input: "MSDeepDet/ConvOnlyResNet/Cast"
  input: "MSDeepDet/ConvOnlyResNet/Cast_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/resize_images/ResizeBilinear"
  op: "ResizeBilinear"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/Maximum"
  input: "MSDeepDet/ConvOnlyResNet/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/score_conv_0/weights"
  input: "ConvOnlyResNet/score_conv_0/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/score_conv_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/score_conv_0/biases"
  input: "ConvOnlyResNet/score_conv_0/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_0/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/score_conv_0/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_0/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_0/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/score_conv_0/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_0/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_0/weights/tag"
  input: "ConvOnlyResNet/score_conv_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_0/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/score_conv_0/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_0/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_0/biases/tag"
  input: "ConvOnlyResNet/score_conv_0/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_0/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/resize_images/ResizeBilinear"
  input: "ConvOnlyResNet/score_conv_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_0/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_0/Conv2D"
  input: "ConvOnlyResNet/score_conv_0/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8408964276313782
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_2"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ToFloat"
  input: "MSDeepDet/ConvOnlyResNet/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_2"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/mul_2"
  input: "MSDeepDet/ConvOnlyResNet/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Cast_2"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/add_2"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8408964276313782
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_3"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ToFloat_1"
  input: "MSDeepDet/ConvOnlyResNet/mul_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_3"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/mul_3"
  input: "MSDeepDet/ConvOnlyResNet/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Cast_3"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/add_3"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/stack_1"
  op: "Pack"
  input: "MSDeepDet/ConvOnlyResNet/Cast_2"
  input: "MSDeepDet/ConvOnlyResNet/Cast_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/resize_images_1/ResizeBilinear"
  op: "ResizeBilinear"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/Maximum"
  input: "MSDeepDet/ConvOnlyResNet/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/score_conv_1/weights"
  input: "ConvOnlyResNet/score_conv_1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/score_conv_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/score_conv_1/biases"
  input: "ConvOnlyResNet/score_conv_1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_1/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/score_conv_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_1/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_1/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/score_conv_1/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_1/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_1/weights/tag"
  input: "ConvOnlyResNet/score_conv_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_1/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/score_conv_1/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_1/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_1/biases/tag"
  input: "ConvOnlyResNet/score_conv_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_1/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/resize_images_1/ResizeBilinear"
  input: "ConvOnlyResNet/score_conv_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_1/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_1/Conv2D"
  input: "ConvOnlyResNet/score_conv_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_4"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ToFloat"
  input: "MSDeepDet/ConvOnlyResNet/mul_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_4"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/mul_4"
  input: "MSDeepDet/ConvOnlyResNet/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Cast_4"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/add_4"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_5"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ToFloat_1"
  input: "MSDeepDet/ConvOnlyResNet/mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_5"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/mul_5"
  input: "MSDeepDet/ConvOnlyResNet/add_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Cast_5"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/add_5"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/stack_2"
  op: "Pack"
  input: "MSDeepDet/ConvOnlyResNet/Cast_4"
  input: "MSDeepDet/ConvOnlyResNet/Cast_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/resize_images_2/ResizeBilinear"
  op: "ResizeBilinear"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/Maximum"
  input: "MSDeepDet/ConvOnlyResNet/stack_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/score_conv_2/weights"
  input: "ConvOnlyResNet/score_conv_2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/score_conv_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/score_conv_2/biases"
  input: "ConvOnlyResNet/score_conv_2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_2/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/score_conv_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_2/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_2/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/score_conv_2/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_2/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_2/weights/tag"
  input: "ConvOnlyResNet/score_conv_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_2/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/score_conv_2/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_2/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_2/biases/tag"
  input: "ConvOnlyResNet/score_conv_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_2/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/resize_images_2/ResizeBilinear"
  input: "ConvOnlyResNet/score_conv_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_2/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_2/Conv2D"
  input: "ConvOnlyResNet/score_conv_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.1892070770263672
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_6"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ToFloat"
  input: "MSDeepDet/ConvOnlyResNet/mul_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_6"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/mul_6"
  input: "MSDeepDet/ConvOnlyResNet/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Cast_6"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/add_6"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.1892070770263672
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_7"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ToFloat_1"
  input: "MSDeepDet/ConvOnlyResNet/mul_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_7"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/mul_7"
  input: "MSDeepDet/ConvOnlyResNet/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Cast_7"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/add_7"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/stack_3"
  op: "Pack"
  input: "MSDeepDet/ConvOnlyResNet/Cast_6"
  input: "MSDeepDet/ConvOnlyResNet/Cast_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/resize_images_3/ResizeBilinear"
  op: "ResizeBilinear"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/Maximum"
  input: "MSDeepDet/ConvOnlyResNet/stack_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/score_conv_3/weights"
  input: "ConvOnlyResNet/score_conv_3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/score_conv_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/score_conv_3/biases"
  input: "ConvOnlyResNet/score_conv_3/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_3/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/score_conv_3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_3/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_3/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/score_conv_3/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_3/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_3/weights/tag"
  input: "ConvOnlyResNet/score_conv_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_3/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/score_conv_3/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_3/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_3/biases/tag"
  input: "ConvOnlyResNet/score_conv_3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_3/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/resize_images_3/ResizeBilinear"
  input: "ConvOnlyResNet/score_conv_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_3/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_3/Conv2D"
  input: "ConvOnlyResNet/score_conv_3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_8/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.4142135381698608
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_8"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ToFloat"
  input: "MSDeepDet/ConvOnlyResNet/mul_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_8/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_8"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/mul_8"
  input: "MSDeepDet/ConvOnlyResNet/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Cast_8"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/add_8"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.4142135381698608
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/mul_9"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ToFloat_1"
  input: "MSDeepDet/ConvOnlyResNet/mul_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/add_9"
  op: "Add"
  input: "MSDeepDet/ConvOnlyResNet/mul_9"
  input: "MSDeepDet/ConvOnlyResNet/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Cast_9"
  op: "Cast"
  input: "MSDeepDet/ConvOnlyResNet/add_9"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/stack_4"
  op: "Pack"
  input: "MSDeepDet/ConvOnlyResNet/Cast_8"
  input: "MSDeepDet/ConvOnlyResNet/Cast_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/resize_images_4/ResizeBilinear"
  op: "ResizeBilinear"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/Maximum"
  input: "MSDeepDet/ConvOnlyResNet/stack_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11881770193576813
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/max"
  input: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/RandomUniform"
  input: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform"
  op: "Add"
  input: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/mul"
  input: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/score_conv_4/weights"
  input: "ConvOnlyResNet/score_conv_4/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/score_conv_4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/score_conv_4/biases"
  input: "ConvOnlyResNet/score_conv_4/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/score_conv_4/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/score_conv_4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/score_conv_4/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_4/weights/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/score_conv_4/weights"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_4/weights"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_4/weights/tag"
  input: "ConvOnlyResNet/score_conv_4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_4/biases/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/score_conv_4/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_4/biases"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_4/biases/tag"
  input: "ConvOnlyResNet/score_conv_4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_4/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/resize_images_4/ResizeBilinear"
  input: "ConvOnlyResNet/score_conv_4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/score_conv_4/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_4/Conv2D"
  input: "ConvOnlyResNet/score_conv_4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\200?\000\000\000\000"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/ori_conv/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/ori_conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 16
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/ori_conv/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/ori_conv/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 16
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/ori_conv/weights/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/ori_conv/weights"
  input: "ConvOnlyResNet/ori_conv/weights/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/ori_conv/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/ori_conv/weights/read"
  op: "Identity"
  input: "ConvOnlyResNet/ori_conv/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/ori_conv/weights"
      }
    }
  }
}
node {
  name: "ConvOnlyResNet/ori_conv/biases"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ConvOnlyResNet/ori_conv/biases/Assign"
  op: "Assign"
  input: "ConvOnlyResNet/ori_conv/biases"
  input: "MSDeepDet/ConvOnlyResNet/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/ori_conv/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ConvOnlyResNet/ori_conv/biases/read"
  op: "Identity"
  input: "ConvOnlyResNet/ori_conv/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ConvOnlyResNet/ori_conv/biases"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/ori_conv/Conv2D"
  op: "Conv2D"
  input: "MSDeepDet/ConvOnlyResNet/LeakyRelu/Maximum"
  input: "ConvOnlyResNet/ori_conv/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/ori_conv/BiasAdd"
  op: "BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/ori_conv/Conv2D"
  input: "ConvOnlyResNet/ori_conv/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/l2_normalize/Square"
  op: "Square"
  input: "MSDeepDet/ConvOnlyResNet/ori_conv/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/l2_normalize/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/l2_normalize/Sum"
  op: "Sum"
  input: "MSDeepDet/ConvOnlyResNet/l2_normalize/Square"
  input: "MSDeepDet/ConvOnlyResNet/l2_normalize/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/l2_normalize/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/l2_normalize/Maximum"
  op: "Maximum"
  input: "MSDeepDet/ConvOnlyResNet/l2_normalize/Sum"
  input: "MSDeepDet/ConvOnlyResNet/l2_normalize/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/l2_normalize/Rsqrt"
  op: "Rsqrt"
  input: "MSDeepDet/ConvOnlyResNet/l2_normalize/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/l2_normalize"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/ori_conv/BiasAdd"
  input: "MSDeepDet/ConvOnlyResNet/l2_normalize/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/ConvOnlyResNet/ori_conv/weights_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/ConvOnlyResNet/ori_conv/weights_0"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/ConvOnlyResNet/ori_conv/weights_0"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/ConvOnlyResNet/ori_conv/weights_0/tag"
  input: "ConvOnlyResNet/ori_conv/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/ConvOnlyResNet/ori_conv/biases_0/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/ConvOnlyResNet/ConvOnlyResNet/ori_conv/biases_0"
      }
    }
  }
}
node {
  name: "MSDeepDet/ConvOnlyResNet/ConvOnlyResNet/ori_conv/biases_0"
  op: "HistogramSummary"
  input: "MSDeepDet/ConvOnlyResNet/ConvOnlyResNet/ori_conv/biases_0/tag"
  input: "ConvOnlyResNet/ori_conv/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\363\004\265?\3607\230?\000\000\200?\375DW?\363\0045?"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments/mean"
  op: "Mean"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_0/BiasAdd"
  input: "MSDeepDet/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/moments/StopGradient"
  op: "StopGradient"
  input: "MSDeepDet/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_0/BiasAdd"
  input: "MSDeepDet/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments/variance"
  op: "Mean"
  input: "MSDeepDet/moments/SquaredDifference"
  input: "MSDeepDet/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "MSDeepDet/batchnorm/add"
  op: "Add"
  input: "MSDeepDet/moments/variance"
  input: "MSDeepDet/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "MSDeepDet/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_0/BiasAdd"
  input: "MSDeepDet/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm/Neg"
  op: "Neg"
  input: "MSDeepDet/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm/mul_1"
  op: "Mul"
  input: "MSDeepDet/batchnorm/Neg"
  input: "MSDeepDet/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm/add_1"
  op: "Add"
  input: "MSDeepDet/batchnorm/mul"
  input: "MSDeepDet/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/resize_images/size"
  op: "Pack"
  input: "MSDeepDet/strided_slice_1"
  input: "MSDeepDet/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/resize_images/ResizeBilinear"
  op: "ResizeBilinear"
  input: "MSDeepDet/batchnorm/add_1"
  input: "MSDeepDet/resize_images/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/moments_1/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments_1/mean"
  op: "Mean"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_1/BiasAdd"
  input: "MSDeepDet/moments_1/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/moments_1/StopGradient"
  op: "StopGradient"
  input: "MSDeepDet/moments_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/moments_1/SquaredDifference"
  op: "SquaredDifference"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_1/BiasAdd"
  input: "MSDeepDet/moments_1/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/moments_1/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments_1/variance"
  op: "Mean"
  input: "MSDeepDet/moments_1/SquaredDifference"
  input: "MSDeepDet/moments_1/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_1/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_1/add"
  op: "Add"
  input: "MSDeepDet/moments_1/variance"
  input: "MSDeepDet/batchnorm_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_1/Rsqrt"
  op: "Rsqrt"
  input: "MSDeepDet/batchnorm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_1/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_1/BiasAdd"
  input: "MSDeepDet/batchnorm_1/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_1/Neg"
  op: "Neg"
  input: "MSDeepDet/moments_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_1/mul_1"
  op: "Mul"
  input: "MSDeepDet/batchnorm_1/Neg"
  input: "MSDeepDet/batchnorm_1/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_1/add_1"
  op: "Add"
  input: "MSDeepDet/batchnorm_1/mul"
  input: "MSDeepDet/batchnorm_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/resize_images_1/size"
  op: "Pack"
  input: "MSDeepDet/strided_slice_1"
  input: "MSDeepDet/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/resize_images_1/ResizeBilinear"
  op: "ResizeBilinear"
  input: "MSDeepDet/batchnorm_1/add_1"
  input: "MSDeepDet/resize_images_1/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/moments_2/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments_2/mean"
  op: "Mean"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_2/BiasAdd"
  input: "MSDeepDet/moments_2/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/moments_2/StopGradient"
  op: "StopGradient"
  input: "MSDeepDet/moments_2/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/moments_2/SquaredDifference"
  op: "SquaredDifference"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_2/BiasAdd"
  input: "MSDeepDet/moments_2/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/moments_2/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments_2/variance"
  op: "Mean"
  input: "MSDeepDet/moments_2/SquaredDifference"
  input: "MSDeepDet/moments_2/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_2/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_2/add"
  op: "Add"
  input: "MSDeepDet/moments_2/variance"
  input: "MSDeepDet/batchnorm_2/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_2/Rsqrt"
  op: "Rsqrt"
  input: "MSDeepDet/batchnorm_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_2/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_2/BiasAdd"
  input: "MSDeepDet/batchnorm_2/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_2/Neg"
  op: "Neg"
  input: "MSDeepDet/moments_2/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_2/mul_1"
  op: "Mul"
  input: "MSDeepDet/batchnorm_2/Neg"
  input: "MSDeepDet/batchnorm_2/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_2/add_1"
  op: "Add"
  input: "MSDeepDet/batchnorm_2/mul"
  input: "MSDeepDet/batchnorm_2/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/resize_images_2/size"
  op: "Pack"
  input: "MSDeepDet/strided_slice_1"
  input: "MSDeepDet/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/resize_images_2/ResizeBilinear"
  op: "ResizeBilinear"
  input: "MSDeepDet/batchnorm_2/add_1"
  input: "MSDeepDet/resize_images_2/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/moments_3/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments_3/mean"
  op: "Mean"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_3/BiasAdd"
  input: "MSDeepDet/moments_3/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/moments_3/StopGradient"
  op: "StopGradient"
  input: "MSDeepDet/moments_3/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/moments_3/SquaredDifference"
  op: "SquaredDifference"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_3/BiasAdd"
  input: "MSDeepDet/moments_3/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/moments_3/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments_3/variance"
  op: "Mean"
  input: "MSDeepDet/moments_3/SquaredDifference"
  input: "MSDeepDet/moments_3/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_3/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_3/add"
  op: "Add"
  input: "MSDeepDet/moments_3/variance"
  input: "MSDeepDet/batchnorm_3/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_3/Rsqrt"
  op: "Rsqrt"
  input: "MSDeepDet/batchnorm_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_3/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_3/BiasAdd"
  input: "MSDeepDet/batchnorm_3/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_3/Neg"
  op: "Neg"
  input: "MSDeepDet/moments_3/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_3/mul_1"
  op: "Mul"
  input: "MSDeepDet/batchnorm_3/Neg"
  input: "MSDeepDet/batchnorm_3/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_3/add_1"
  op: "Add"
  input: "MSDeepDet/batchnorm_3/mul"
  input: "MSDeepDet/batchnorm_3/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/resize_images_3/size"
  op: "Pack"
  input: "MSDeepDet/strided_slice_1"
  input: "MSDeepDet/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/resize_images_3/ResizeBilinear"
  op: "ResizeBilinear"
  input: "MSDeepDet/batchnorm_3/add_1"
  input: "MSDeepDet/resize_images_3/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/moments_4/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments_4/mean"
  op: "Mean"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_4/BiasAdd"
  input: "MSDeepDet/moments_4/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/moments_4/StopGradient"
  op: "StopGradient"
  input: "MSDeepDet/moments_4/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/moments_4/SquaredDifference"
  op: "SquaredDifference"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_4/BiasAdd"
  input: "MSDeepDet/moments_4/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/moments_4/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/moments_4/variance"
  op: "Mean"
  input: "MSDeepDet/moments_4/SquaredDifference"
  input: "MSDeepDet/moments_4/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_4/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_4/add"
  op: "Add"
  input: "MSDeepDet/moments_4/variance"
  input: "MSDeepDet/batchnorm_4/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_4/Rsqrt"
  op: "Rsqrt"
  input: "MSDeepDet/batchnorm_4/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_4/mul"
  op: "Mul"
  input: "MSDeepDet/ConvOnlyResNet/score_conv_4/BiasAdd"
  input: "MSDeepDet/batchnorm_4/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_4/Neg"
  op: "Neg"
  input: "MSDeepDet/moments_4/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_4/mul_1"
  op: "Mul"
  input: "MSDeepDet/batchnorm_4/Neg"
  input: "MSDeepDet/batchnorm_4/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/batchnorm_4/add_1"
  op: "Add"
  input: "MSDeepDet/batchnorm_4/mul"
  input: "MSDeepDet/batchnorm_4/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/resize_images_4/size"
  op: "Pack"
  input: "MSDeepDet/strided_slice_1"
  input: "MSDeepDet/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/resize_images_4/ResizeBilinear"
  op: "ResizeBilinear"
  input: "MSDeepDet/batchnorm_4/add_1"
  input: "MSDeepDet/resize_images_4/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/concat"
  op: "ConcatV2"
  input: "MSDeepDet/resize_images/ResizeBilinear"
  input: "MSDeepDet/resize_images_1/ResizeBilinear"
  input: "MSDeepDet/resize_images_2/ResizeBilinear"
  input: "MSDeepDet/resize_images_3/ResizeBilinear"
  input: "MSDeepDet/resize_images_4/ResizeBilinear"
  input: "MSDeepDet/concat/axis"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_3"
  op: "StridedSlice"
  input: "MSDeepDet/concat"
  input: "MSDeepDet/strided_slice_3/stack"
  input: "MSDeepDet/strided_slice_3/stack_1"
  input: "MSDeepDet/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\001\000\000\000\002\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/transpose"
  op: "Transpose"
  input: "MSDeepDet/strided_slice_3"
  input: "MSDeepDet/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/MaxPool3D"
  op: "MaxPool3D"
  input: "MSDeepDet/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NDHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 5
        i: 15
        i: 15
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 5
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_4"
  op: "StridedSlice"
  input: "MSDeepDet/MaxPool3D"
  input: "MSDeepDet/strided_slice_4/stack"
  input: "MSDeepDet/strided_slice_4/stack_1"
  input: "MSDeepDet/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "MSDeepDet/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\003\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/transpose_1"
  op: "Transpose"
  input: "MSDeepDet/strided_slice_4"
  input: "MSDeepDet/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/sub"
  op: "Sub"
  input: "MSDeepDet/concat"
  input: "MSDeepDet/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.0
      }
    }
  }
}
node {
  name: "MSDeepDet/mul"
  op: "Mul"
  input: "MSDeepDet/mul/x"
  input: "MSDeepDet/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Exp"
  op: "Exp"
  input: "MSDeepDet/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_5"
  op: "StridedSlice"
  input: "MSDeepDet/Exp"
  input: "MSDeepDet/strided_slice_5/stack"
  input: "MSDeepDet/strided_slice_5/stack_1"
  input: "MSDeepDet/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\001\000\000\000\002\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/transpose_2"
  op: "Transpose"
  input: "MSDeepDet/strided_slice_5"
  input: "MSDeepDet/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 15
          }
          dim {
            size: 15
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "MSDeepDet/Conv3D"
  op: "Conv3D"
  input: "MSDeepDet/transpose_2"
  input: "MSDeepDet/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NDHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 5
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_6"
  op: "StridedSlice"
  input: "MSDeepDet/Conv3D"
  input: "MSDeepDet/strided_slice_6/stack"
  input: "MSDeepDet/strided_slice_6/stack_1"
  input: "MSDeepDet/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "MSDeepDet/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\003\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/transpose_3"
  op: "Transpose"
  input: "MSDeepDet/strided_slice_6"
  input: "MSDeepDet/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999974752427e-07
      }
    }
  }
}
node {
  name: "MSDeepDet/add"
  op: "Add"
  input: "MSDeepDet/transpose_3"
  input: "MSDeepDet/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/truediv"
  op: "RealDiv"
  input: "MSDeepDet/Exp"
  input: "MSDeepDet/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/Max"
  op: "Max"
  input: "MSDeepDet/truediv"
  input: "MSDeepDet/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/sub_1"
  op: "Sub"
  input: "MSDeepDet/truediv"
  input: "MSDeepDet/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 100.0
      }
    }
  }
}
node {
  name: "MSDeepDet/mul_1"
  op: "Mul"
  input: "MSDeepDet/mul_1/x"
  input: "MSDeepDet/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Exp_1"
  op: "Exp"
  input: "MSDeepDet/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/Sum"
  op: "Sum"
  input: "MSDeepDet/Exp_1"
  input: "MSDeepDet/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "MSDeepDet/add_1"
  op: "Add"
  input: "MSDeepDet/Sum"
  input: "MSDeepDet/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/truediv_1"
  op: "RealDiv"
  input: "MSDeepDet/Exp_1"
  input: "MSDeepDet/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Max_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/Max_1"
  op: "Max"
  input: "MSDeepDet/truediv"
  input: "MSDeepDet/Max_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/sub_2"
  op: "Sub"
  input: "MSDeepDet/truediv"
  input: "MSDeepDet/Max_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 100.0
      }
    }
  }
}
node {
  name: "MSDeepDet/mul_2"
  op: "Mul"
  input: "MSDeepDet/mul_2/x"
  input: "MSDeepDet/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Exp_2"
  op: "Exp"
  input: "MSDeepDet/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/Sum_1"
  op: "Sum"
  input: "MSDeepDet/Exp_2"
  input: "MSDeepDet/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "MSDeepDet/add_2"
  op: "Add"
  input: "MSDeepDet/Sum_1"
  input: "MSDeepDet/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/truediv_2"
  op: "RealDiv"
  input: "MSDeepDet/Exp_2"
  input: "MSDeepDet/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/mul_3"
  op: "Mul"
  input: "MSDeepDet/truediv"
  input: "MSDeepDet/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Sum_2/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/Sum_2"
  op: "Sum"
  input: "MSDeepDet/mul_3"
  input: "MSDeepDet/Sum_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "MSDeepDet/Reshape"
  op: "Reshape"
  input: "MSDeepDet/Const"
  input: "MSDeepDet/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/mul_4"
  op: "Mul"
  input: "MSDeepDet/Reshape"
  input: "MSDeepDet/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Sum_3/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/Sum_3"
  op: "Sum"
  input: "MSDeepDet/mul_4"
  input: "MSDeepDet/Sum_3/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_7"
  op: "StridedSlice"
  input: "MSDeepDet/Sum_2"
  input: "MSDeepDet/strided_slice_7/stack"
  input: "MSDeepDet/strided_slice_7/stack_1"
  input: "MSDeepDet/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/max_scales/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/max_scales"
      }
    }
  }
}
node {
  name: "MSDeepDet/max_scales"
  op: "HistogramSummary"
  input: "MSDeepDet/max_scales/tag"
  input: "MSDeepDet/Sum_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/sub_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MSDeepDet/sub_3"
  op: "Sub"
  input: "MSDeepDet/strided_slice_1"
  input: "MSDeepDet/sub_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/sub_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MSDeepDet/sub_4"
  op: "Sub"
  input: "MSDeepDet/strided_slice_2"
  input: "MSDeepDet/sub_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/stack"
  op: "Pack"
  input: "MSDeepDet/stack/0"
  input: "MSDeepDet/sub_3"
  input: "MSDeepDet/sub_4"
  input: "MSDeepDet/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/ones"
  op: "Fill"
  input: "MSDeepDet/stack"
  input: "MSDeepDet/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/Pad"
  op: "Pad"
  input: "MSDeepDet/ones"
  input: "MSDeepDet/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/mul_5"
  op: "Mul"
  input: "MSDeepDet/strided_slice_7"
  input: "MSDeepDet/Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/sub_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MSDeepDet/sub_5"
  op: "Sub"
  input: "MSDeepDet/strided_slice_1"
  input: "MSDeepDet/sub_5/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/sub_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "MSDeepDet/sub_6"
  op: "Sub"
  input: "MSDeepDet/strided_slice_2"
  input: "MSDeepDet/sub_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/stack_1"
  op: "Pack"
  input: "MSDeepDet/stack_1/0"
  input: "MSDeepDet/sub_5"
  input: "MSDeepDet/sub_6"
  input: "MSDeepDet/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/ones_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/ones_1"
  op: "Fill"
  input: "MSDeepDet/stack_1"
  input: "MSDeepDet/ones_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/Pad_1/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/Pad_1"
  op: "Pad"
  input: "MSDeepDet/ones_1"
  input: "MSDeepDet/Pad_1/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Shape"
  op: "Shape"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice"
  op: "StridedSlice"
  input: "MSDeepDet/NMS/Shape"
  input: "MSDeepDet/NMS/strided_slice/stack"
  input: "MSDeepDet/NMS/strided_slice/stack_1"
  input: "MSDeepDet/NMS/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/NMS/Shape_1"
  op: "Shape"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_1"
  op: "StridedSlice"
  input: "MSDeepDet/NMS/Shape_1"
  input: "MSDeepDet/NMS/strided_slice_1/stack"
  input: "MSDeepDet/NMS/strided_slice_1/stack_1"
  input: "MSDeepDet/NMS/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/NMS/Shape_2"
  op: "Shape"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_2"
  op: "StridedSlice"
  input: "MSDeepDet/NMS/Shape_2"
  input: "MSDeepDet/NMS/strided_slice_2/stack"
  input: "MSDeepDet/NMS/strided_slice_2/stack_1"
  input: "MSDeepDet/NMS/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/NMS/Shape_3"
  op: "Shape"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/strided_slice_3"
  op: "StridedSlice"
  input: "MSDeepDet/NMS/Shape_3"
  input: "MSDeepDet/NMS/strided_slice_3/stack"
  input: "MSDeepDet/NMS/strided_slice_3/stack_1"
  input: "MSDeepDet/NMS/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/NMS/zeros_like"
  op: "ZerosLike"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Less"
  op: "Less"
  input: "MSDeepDet/mul_5"
  input: "MSDeepDet/NMS/Less/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/Select"
  op: "Select"
  input: "MSDeepDet/NMS/Less"
  input: "MSDeepDet/NMS/zeros_like"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Pad"
  op: "Pad"
  input: "MSDeepDet/NMS/Select"
  input: "MSDeepDet/NMS/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_1"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice/size/0"
  input: "MSDeepDet/NMS/add"
  input: "MSDeepDet/NMS/add_1"
  input: "MSDeepDet/NMS/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice/begin"
  input: "MSDeepDet/NMS/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_2"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_3"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_1/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_1/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_1/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_1/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_1/size/0"
  input: "MSDeepDet/NMS/add_2"
  input: "MSDeepDet/NMS/add_3"
  input: "MSDeepDet/NMS/Slice_1/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_1"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_1/begin"
  input: "MSDeepDet/NMS/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_4"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_5"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_5/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_2/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_2/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_2/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_2/size/0"
  input: "MSDeepDet/NMS/add_4"
  input: "MSDeepDet/NMS/add_5"
  input: "MSDeepDet/NMS/Slice_2/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_2"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_2/begin"
  input: "MSDeepDet/NMS/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_6"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_7"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_3/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_3/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_3/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_3/size/0"
  input: "MSDeepDet/NMS/add_6"
  input: "MSDeepDet/NMS/add_7"
  input: "MSDeepDet/NMS/Slice_3/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_3"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_3/begin"
  input: "MSDeepDet/NMS/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_8/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_8"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_9"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_4/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_4/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_4/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_4/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_4/size/0"
  input: "MSDeepDet/NMS/add_8"
  input: "MSDeepDet/NMS/add_9"
  input: "MSDeepDet/NMS/Slice_4/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_4"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_4/begin"
  input: "MSDeepDet/NMS/Slice_4/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_10/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_10"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_10/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_11"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_11/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_5/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_5/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_5/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_5/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_5/size/0"
  input: "MSDeepDet/NMS/add_10"
  input: "MSDeepDet/NMS/add_11"
  input: "MSDeepDet/NMS/Slice_5/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_5"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_5/begin"
  input: "MSDeepDet/NMS/Slice_5/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_12"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_13/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_13"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_13/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_6/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_6/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_6/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_6/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_6/size/0"
  input: "MSDeepDet/NMS/add_12"
  input: "MSDeepDet/NMS/add_13"
  input: "MSDeepDet/NMS/Slice_6/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_6"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_6/begin"
  input: "MSDeepDet/NMS/Slice_6/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_14/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_14"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_14/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_15"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_7/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_7/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_7/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_7/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_7/size/0"
  input: "MSDeepDet/NMS/add_14"
  input: "MSDeepDet/NMS/add_15"
  input: "MSDeepDet/NMS/Slice_7/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_7"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_7/begin"
  input: "MSDeepDet/NMS/Slice_7/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_16/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_16"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_16/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_17/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_17"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_17/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_8/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\003\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_8/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_8/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_8/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_8/size/0"
  input: "MSDeepDet/NMS/add_16"
  input: "MSDeepDet/NMS/add_17"
  input: "MSDeepDet/NMS/Slice_8/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_8"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_8/begin"
  input: "MSDeepDet/NMS/Slice_8/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_18"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_19/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_19"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_19/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_9/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\004\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_9/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_9/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_9/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_9/size/0"
  input: "MSDeepDet/NMS/add_18"
  input: "MSDeepDet/NMS/add_19"
  input: "MSDeepDet/NMS/Slice_9/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_9"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_9/begin"
  input: "MSDeepDet/NMS/Slice_9/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_20/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_20"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_20/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_21"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_10/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_10/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_10/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_10/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_10/size/0"
  input: "MSDeepDet/NMS/add_20"
  input: "MSDeepDet/NMS/add_21"
  input: "MSDeepDet/NMS/Slice_10/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_10"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_10/begin"
  input: "MSDeepDet/NMS/Slice_10/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_22/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_22"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_22/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_23/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_23"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_23/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_11/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_11/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_11/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_11/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_11/size/0"
  input: "MSDeepDet/NMS/add_22"
  input: "MSDeepDet/NMS/add_23"
  input: "MSDeepDet/NMS/Slice_11/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_11"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_11/begin"
  input: "MSDeepDet/NMS/Slice_11/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_24"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_25/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_25"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_25/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_12/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_12/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_12/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_12/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_12/size/0"
  input: "MSDeepDet/NMS/add_24"
  input: "MSDeepDet/NMS/add_25"
  input: "MSDeepDet/NMS/Slice_12/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_12"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_12/begin"
  input: "MSDeepDet/NMS/Slice_12/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_26/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_26"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_26/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_27"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_13/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\003\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_13/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_13/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_13/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_13/size/0"
  input: "MSDeepDet/NMS/add_26"
  input: "MSDeepDet/NMS/add_27"
  input: "MSDeepDet/NMS/Slice_13/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_13"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_13/begin"
  input: "MSDeepDet/NMS/Slice_13/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_28/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_28"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_28/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_29/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_29"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_29/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_14/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\004\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_14/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_14/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_14/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_14/size/0"
  input: "MSDeepDet/NMS/add_28"
  input: "MSDeepDet/NMS/add_29"
  input: "MSDeepDet/NMS/Slice_14/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_14"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_14/begin"
  input: "MSDeepDet/NMS/Slice_14/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_30"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_31/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_31"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_31/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_15/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_15/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_15/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_15/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_15/size/0"
  input: "MSDeepDet/NMS/add_30"
  input: "MSDeepDet/NMS/add_31"
  input: "MSDeepDet/NMS/Slice_15/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_15"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_15/begin"
  input: "MSDeepDet/NMS/Slice_15/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_32/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_32"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_32/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_33"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_16/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_16/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_16/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_16/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_16/size/0"
  input: "MSDeepDet/NMS/add_32"
  input: "MSDeepDet/NMS/add_33"
  input: "MSDeepDet/NMS/Slice_16/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_16"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_16/begin"
  input: "MSDeepDet/NMS/Slice_16/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_34/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_34"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_34/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_35/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_35"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_35/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_17/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_17/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_17/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_17/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_17/size/0"
  input: "MSDeepDet/NMS/add_34"
  input: "MSDeepDet/NMS/add_35"
  input: "MSDeepDet/NMS/Slice_17/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_17"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_17/begin"
  input: "MSDeepDet/NMS/Slice_17/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_36"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_37/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_37"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_37/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_18/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\003\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_18/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_18/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_18/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_18/size/0"
  input: "MSDeepDet/NMS/add_36"
  input: "MSDeepDet/NMS/add_37"
  input: "MSDeepDet/NMS/Slice_18/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_18"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_18/begin"
  input: "MSDeepDet/NMS/Slice_18/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_38/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_38"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_38/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_39"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_19/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\003\000\000\000\004\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_19/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_19/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_19/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_19/size/0"
  input: "MSDeepDet/NMS/add_38"
  input: "MSDeepDet/NMS/add_39"
  input: "MSDeepDet/NMS/Slice_19/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_19"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_19/begin"
  input: "MSDeepDet/NMS/Slice_19/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_40/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_40"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_40/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_41/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_41"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_41/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_20/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_20/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_20/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_20/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_20/size/0"
  input: "MSDeepDet/NMS/add_40"
  input: "MSDeepDet/NMS/add_41"
  input: "MSDeepDet/NMS/Slice_20/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_20"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_20/begin"
  input: "MSDeepDet/NMS/Slice_20/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_42/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_42"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_42/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_43/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_43"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_43/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_21/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\004\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_21/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_21/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_21/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_21/size/0"
  input: "MSDeepDet/NMS/add_42"
  input: "MSDeepDet/NMS/add_43"
  input: "MSDeepDet/NMS/Slice_21/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_21"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_21/begin"
  input: "MSDeepDet/NMS/Slice_21/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_44/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_44"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_44/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_45/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_45"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_45/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_22/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\004\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_22/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_22/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_22/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_22/size/0"
  input: "MSDeepDet/NMS/add_44"
  input: "MSDeepDet/NMS/add_45"
  input: "MSDeepDet/NMS/Slice_22/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_22"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_22/begin"
  input: "MSDeepDet/NMS/Slice_22/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_46/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_46"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_46/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_47/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_47"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_47/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_23/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\004\000\000\000\003\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_23/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_23/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_23/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_23/size/0"
  input: "MSDeepDet/NMS/add_46"
  input: "MSDeepDet/NMS/add_47"
  input: "MSDeepDet/NMS/Slice_23/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_23"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_23/begin"
  input: "MSDeepDet/NMS/Slice_23/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_48/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_48"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/add_48/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_49/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/add_49"
  op: "Add"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/add_49/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_24/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_24/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_24/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_24/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_24/size/0"
  input: "MSDeepDet/NMS/add_48"
  input: "MSDeepDet/NMS/add_49"
  input: "MSDeepDet/NMS/Slice_24/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_24"
  op: "Slice"
  input: "MSDeepDet/NMS/Pad"
  input: "MSDeepDet/NMS/Slice_24/begin"
  input: "MSDeepDet/NMS/Slice_24/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/Greater"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/Greater_1"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/Greater"
  input: "MSDeepDet/NMS/Greater_1"
}
node {
  name: "MSDeepDet/NMS/Greater_2"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_1"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd"
  input: "MSDeepDet/NMS/Greater_2"
}
node {
  name: "MSDeepDet/NMS/Greater_3"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_2"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_1"
  input: "MSDeepDet/NMS/Greater_3"
}
node {
  name: "MSDeepDet/NMS/Greater_4"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_3"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_2"
  input: "MSDeepDet/NMS/Greater_4"
}
node {
  name: "MSDeepDet/NMS/Greater_5"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_4"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_3"
  input: "MSDeepDet/NMS/Greater_5"
}
node {
  name: "MSDeepDet/NMS/Greater_6"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_5"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_4"
  input: "MSDeepDet/NMS/Greater_6"
}
node {
  name: "MSDeepDet/NMS/Greater_7"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_6"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_5"
  input: "MSDeepDet/NMS/Greater_7"
}
node {
  name: "MSDeepDet/NMS/Greater_8"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_7"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_6"
  input: "MSDeepDet/NMS/Greater_8"
}
node {
  name: "MSDeepDet/NMS/Greater_9"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_8"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_7"
  input: "MSDeepDet/NMS/Greater_9"
}
node {
  name: "MSDeepDet/NMS/Greater_10"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_9"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_8"
  input: "MSDeepDet/NMS/Greater_10"
}
node {
  name: "MSDeepDet/NMS/Greater_11"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_10"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_9"
  input: "MSDeepDet/NMS/Greater_11"
}
node {
  name: "MSDeepDet/NMS/Greater_12"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_11"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_10"
  input: "MSDeepDet/NMS/Greater_12"
}
node {
  name: "MSDeepDet/NMS/Greater_13"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_12"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_11"
  input: "MSDeepDet/NMS/Greater_13"
}
node {
  name: "MSDeepDet/NMS/Greater_14"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_13"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_12"
  input: "MSDeepDet/NMS/Greater_14"
}
node {
  name: "MSDeepDet/NMS/Greater_15"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_14"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_13"
  input: "MSDeepDet/NMS/Greater_15"
}
node {
  name: "MSDeepDet/NMS/Greater_16"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_15"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_14"
  input: "MSDeepDet/NMS/Greater_16"
}
node {
  name: "MSDeepDet/NMS/Greater_17"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_16"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_15"
  input: "MSDeepDet/NMS/Greater_17"
}
node {
  name: "MSDeepDet/NMS/Greater_18"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_17"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_16"
  input: "MSDeepDet/NMS/Greater_18"
}
node {
  name: "MSDeepDet/NMS/Greater_19"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_18"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_17"
  input: "MSDeepDet/NMS/Greater_19"
}
node {
  name: "MSDeepDet/NMS/Greater_20"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_19"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_18"
  input: "MSDeepDet/NMS/Greater_20"
}
node {
  name: "MSDeepDet/NMS/Greater_21"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_20"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_19"
  input: "MSDeepDet/NMS/Greater_21"
}
node {
  name: "MSDeepDet/NMS/Greater_22"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_21"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_20"
  input: "MSDeepDet/NMS/Greater_22"
}
node {
  name: "MSDeepDet/NMS/Greater_23"
  op: "Greater"
  input: "MSDeepDet/NMS/Slice_12"
  input: "MSDeepDet/NMS/Slice_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/NMS/LogicalAnd_22"
  op: "LogicalAnd"
  input: "MSDeepDet/NMS/LogicalAnd_21"
  input: "MSDeepDet/NMS/Greater_23"
}
node {
  name: "MSDeepDet/NMS/Slice_25/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_25/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_25/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_25/size"
  op: "Pack"
  input: "MSDeepDet/NMS/Slice_25/size/0"
  input: "MSDeepDet/NMS/strided_slice_1"
  input: "MSDeepDet/NMS/strided_slice_2"
  input: "MSDeepDet/NMS/Slice_25/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/NMS/Slice_25"
  op: "Slice"
  input: "MSDeepDet/NMS/LogicalAnd_22"
  input: "MSDeepDet/NMS/Slice_25/begin"
  input: "MSDeepDet/NMS/Slice_25/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "MSDeepDet/NMS/Cast"
  op: "Cast"
  input: "MSDeepDet/NMS/Slice_25"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "MSDeepDet/mul_6"
  op: "Mul"
  input: "MSDeepDet/mul_5"
  input: "MSDeepDet/NMS/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/mul_7"
  op: "Mul"
  input: "MSDeepDet/mul_6"
  input: "MSDeepDet/Pad_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Shape_3"
  op: "Shape"
  input: "MSDeepDet/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_8"
  op: "StridedSlice"
  input: "MSDeepDet/Shape_3"
  input: "MSDeepDet/strided_slice_8/stack"
  input: "MSDeepDet/strided_slice_8/stack_1"
  input: "MSDeepDet/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/Shape_4"
  op: "Shape"
  input: "MSDeepDet/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_9"
  op: "StridedSlice"
  input: "MSDeepDet/Shape_4"
  input: "MSDeepDet/strided_slice_9/stack"
  input: "MSDeepDet/strided_slice_9/stack_1"
  input: "MSDeepDet/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/Shape_5"
  op: "Shape"
  input: "MSDeepDet/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_10"
  op: "StridedSlice"
  input: "MSDeepDet/Shape_5"
  input: "MSDeepDet/strided_slice_10/stack"
  input: "MSDeepDet/strided_slice_10/stack_1"
  input: "MSDeepDet/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/Reshape_1/shape"
  op: "Pack"
  input: "MSDeepDet/strided_slice_8"
  input: "MSDeepDet/Reshape_1/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/Reshape_1"
  op: "Reshape"
  input: "MSDeepDet/mul_7"
  input: "MSDeepDet/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/Shape_6"
  op: "Shape"
  input: "MSDeepDet/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_11"
  op: "StridedSlice"
  input: "MSDeepDet/Shape_6"
  input: "MSDeepDet/strided_slice_11/stack"
  input: "MSDeepDet/strided_slice_11/stack_1"
  input: "MSDeepDet/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/TopKV2/k"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "MSDeepDet/TopKV2"
  op: "TopKV2"
  input: "MSDeepDet/Reshape_1"
  input: "MSDeepDet/TopKV2/k"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "sorted"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/range"
  op: "Range"
  input: "MSDeepDet/range/start"
  input: "MSDeepDet/strided_slice_8"
  input: "MSDeepDet/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/mul_8"
  op: "Mul"
  input: "MSDeepDet/range"
  input: "MSDeepDet/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/ExpandDims"
  op: "ExpandDims"
  input: "MSDeepDet/mul_8"
  input: "MSDeepDet/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/add_3"
  op: "Add"
  input: "MSDeepDet/TopKV2:1"
  input: "MSDeepDet/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/Reshape_2"
  op: "Reshape"
  input: "MSDeepDet/add_3"
  input: "MSDeepDet/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/mul_9"
  op: "Mul"
  input: "MSDeepDet/strided_slice_8"
  input: "MSDeepDet/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SparseToDense/output_shape"
  op: "Pack"
  input: "MSDeepDet/mul_9"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/SparseToDense/sparse_values"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SparseToDense"
  op: "SparseToDense"
  input: "MSDeepDet/Reshape_2"
  input: "MSDeepDet/SparseToDense/output_shape"
  input: "MSDeepDet/SparseToDense/sparse_values"
  input: "MSDeepDet/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/Reshape_3/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/Reshape_3/shape"
  op: "Pack"
  input: "MSDeepDet/strided_slice_8"
  input: "MSDeepDet/strided_slice_9"
  input: "MSDeepDet/strided_slice_10"
  input: "MSDeepDet/Reshape_3/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/Reshape_3"
  op: "Reshape"
  input: "MSDeepDet/SparseToDense"
  input: "MSDeepDet/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/Cast"
  op: "Cast"
  input: "MSDeepDet/Reshape_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/mul_10"
  op: "Mul"
  input: "MSDeepDet/Cast"
  input: "MSDeepDet/NMS/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/StopGradient"
  op: "StopGradient"
  input: "MSDeepDet/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MSDeepDet/Greater"
  op: "Greater"
  input: "MSDeepDet/StopGradient"
  input: "MSDeepDet/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Where"
  op: "Where"
  input: "MSDeepDet/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "MSDeepDet/Sum_4/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/Sum_4"
  op: "Sum"
  input: "MSDeepDet/StopGradient"
  input: "MSDeepDet/Sum_4/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/Cast_1"
  op: "Cast"
  input: "MSDeepDet/Where"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "MSDeepDet/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/split/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/split"
  op: "Split"
  input: "MSDeepDet/split/split_dim"
  input: "MSDeepDet/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "MSDeepDet/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/Reshape_4"
  op: "Reshape"
  input: "MSDeepDet/split"
  input: "MSDeepDet/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/concat_1"
  op: "ConcatV2"
  input: "MSDeepDet/split:2"
  input: "MSDeepDet/split:1"
  input: "MSDeepDet/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/Cast_2"
  op: "Cast"
  input: "MSDeepDet/Sum_4"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/split_1/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/split_1"
  op: "Split"
  input: "MSDeepDet/split_1/split_dim"
  input: "MSDeepDet/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_12"
  op: "StridedSlice"
  input: "MSDeepDet/Reshape_4"
  input: "MSDeepDet/strided_slice_12/stack"
  input: "MSDeepDet/strided_slice_12/stack_1"
  input: "MSDeepDet/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/concat_2"
  op: "ConcatV2"
  input: "MSDeepDet/strided_slice_12"
  input: "MSDeepDet/split_1:1"
  input: "MSDeepDet/split_1"
  input: "MSDeepDet/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/GatherNd"
  op: "GatherNd"
  input: "MSDeepDet/Sum_3"
  input: "MSDeepDet/concat_2"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/split_2/split_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/split_2"
  op: "Split"
  input: "MSDeepDet/split_2/split_dim"
  input: "MSDeepDet/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "num_split"
    value {
      i: 2
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_13"
  op: "StridedSlice"
  input: "MSDeepDet/Reshape_4"
  input: "MSDeepDet/strided_slice_13/stack"
  input: "MSDeepDet/strided_slice_13/stack_1"
  input: "MSDeepDet/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/concat_3"
  op: "ConcatV2"
  input: "MSDeepDet/strided_slice_13"
  input: "MSDeepDet/split_2:1"
  input: "MSDeepDet/split_2"
  input: "MSDeepDet/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/GatherNd_1"
  op: "GatherNd"
  input: "MSDeepDet/ConvOnlyResNet/l2_normalize"
  input: "MSDeepDet/concat_3"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Shape"
  op: "Shape"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice"
  op: "StridedSlice"
  input: "MSDeepDet/SpatialTransformCropper/Shape"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice/stack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Shape_1"
  op: "Shape"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_1"
  op: "StridedSlice"
  input: "MSDeepDet/SpatialTransformCropper/Shape_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_1/stack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_1/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Shape_2"
  op: "Shape"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_2"
  op: "StridedSlice"
  input: "MSDeepDet/SpatialTransformCropper/Shape_2"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_2/stack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_2/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Shape_3"
  op: "Shape"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_3"
  op: "StridedSlice"
  input: "MSDeepDet/SpatialTransformCropper/Shape_3"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_3/stack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_3/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Shape_4"
  op: "Shape"
  input: "MSDeepDet/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_4"
  op: "StridedSlice"
  input: "MSDeepDet/SpatialTransformCropper/Shape_4"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_4/stack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_4/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Shape_5"
  op: "Shape"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_5"
  op: "StridedSlice"
  input: "MSDeepDet/SpatialTransformCropper/Shape_5"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_5/stack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_5/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_5"
  input: "MSDeepDet/SpatialTransformCropper/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Shape_6"
  op: "Shape"
  input: "MSDeepDet/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_6"
  op: "StridedSlice"
  input: "MSDeepDet/SpatialTransformCropper/Shape_6"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_6/stack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_6/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub_1"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_6"
  input: "MSDeepDet/SpatialTransformCropper/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ones"
  op: "Fill"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/stack"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace/stop"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace/num"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace"
  op: "LinSpace"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace/start"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace/stop"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace/num"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ExpandDims"
  op: "ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/transpose"
  op: "Transpose"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/MatMul"
  op: "MatMul"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ones"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace_1/stop"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace_1/num"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace_1"
  op: "LinSpace"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace_1/start"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace_1/stop"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace_1/num"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ExpandDims_1"
  op: "ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/LinSpace_1"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\t\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ones_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ones_1"
  op: "Fill"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ones_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/MatMul_1"
  op: "MatMul"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ExpandDims_1"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ones_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/Reshape"
  op: "Reshape"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/MatMul"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/Reshape_1"
  op: "Reshape"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/MatMul_1"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ones_like/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000Q\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/ones_like"
  op: "Fill"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ones_like/Shape"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/meshgrid/concat"
  op: "ConcatV2"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/Reshape"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/Reshape_1"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/ones_like"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims"
  op: "ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/meshgrid/concat"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape"
  op: "Reshape"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/stack"
  op: "Pack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_4"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile"
  op: "Tile"
  input: "MSDeepDet/SpatialTransformCropper/Reshape"
  input: "MSDeepDet/SpatialTransformCropper/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/stack_1"
  op: "Pack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_4"
  input: "MSDeepDet/SpatialTransformCropper/stack_1/1"
  input: "MSDeepDet/SpatialTransformCropper/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape_1"
  op: "Reshape"
  input: "MSDeepDet/SpatialTransformCropper/Tile"
  input: "MSDeepDet/SpatialTransformCropper/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/eye/ones"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/eye/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/eye/MatrixSetDiag"
  op: "MatrixSetDiag"
  input: "MSDeepDet/SpatialTransformCropper/eye/zeros"
  input: "MSDeepDet/SpatialTransformCropper/eye/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_7"
  op: "StridedSlice"
  input: "MSDeepDet/SpatialTransformCropper/eye/MatrixSetDiag"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_7/stack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_7/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile_1/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile_1/multiples"
  op: "Pack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_4"
  input: "MSDeepDet/SpatialTransformCropper/Tile_1/multiples/1"
  input: "MSDeepDet/SpatialTransformCropper/Tile_1/multiples/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile_1"
  op: "Tile"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_7"
  input: "MSDeepDet/SpatialTransformCropper/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_8"
  op: "StridedSlice"
  input: "MSDeepDet/GatherNd"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_8/stack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_8/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 6
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/Tile_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\200?"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile_2/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile_2/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile_2/multiples"
  op: "Pack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_4"
  input: "MSDeepDet/SpatialTransformCropper/Tile_2/multiples/1"
  input: "MSDeepDet/SpatialTransformCropper/Tile_2/multiples/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile_2"
  op: "Tile"
  input: "MSDeepDet/SpatialTransformCropper/Const"
  input: "MSDeepDet/SpatialTransformCropper/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/concat"
  op: "ConcatV2"
  input: "MSDeepDet/SpatialTransformCropper/mul"
  input: "MSDeepDet/SpatialTransformCropper/Tile_2"
  input: "MSDeepDet/SpatialTransformCropper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/MatMul"
  op: "BatchMatMul"
  input: "MSDeepDet/SpatialTransformCropper/concat"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice"
  op: "Slice"
  input: "MSDeepDet/SpatialTransformCropper/MatMul"
  input: "MSDeepDet/SpatialTransformCropper/Slice/begin"
  input: "MSDeepDet/SpatialTransformCropper/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice_1/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice_1"
  op: "Slice"
  input: "MSDeepDet/SpatialTransformCropper/MatMul"
  input: "MSDeepDet/SpatialTransformCropper/Slice_1/begin"
  input: "MSDeepDet/SpatialTransformCropper/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_1"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/Slice"
  input: "MSDeepDet/SpatialTransformCropper/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/truediv"
  op: "RealDiv"
  input: "MSDeepDet/SpatialTransformCropper/mul_1"
  input: "MSDeepDet/SpatialTransformCropper/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_2"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/Slice_1"
  input: "MSDeepDet/SpatialTransformCropper/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/truediv_1"
  op: "RealDiv"
  input: "MSDeepDet/SpatialTransformCropper/mul_2"
  input: "MSDeepDet/SpatialTransformCropper/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Cast_2"
  op: "Cast"
  input: "MSDeepDet/concat_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice_2/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice_2"
  op: "Slice"
  input: "MSDeepDet/SpatialTransformCropper/Cast_2"
  input: "MSDeepDet/SpatialTransformCropper/Slice_2/begin"
  input: "MSDeepDet/SpatialTransformCropper/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_1"
  op: "ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/Slice_2"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice_3/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Slice_3"
  op: "Slice"
  input: "MSDeepDet/SpatialTransformCropper/Cast_2"
  input: "MSDeepDet/SpatialTransformCropper/Slice_3/begin"
  input: "MSDeepDet/SpatialTransformCropper/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_2"
  op: "ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/Slice_3"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add"
  op: "Add"
  input: "MSDeepDet/SpatialTransformCropper/truediv"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_1"
  op: "Add"
  input: "MSDeepDet/SpatialTransformCropper/truediv_1"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape_2"
  op: "Reshape"
  input: "MSDeepDet/SpatialTransformCropper/add"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape_3"
  op: "Reshape"
  input: "MSDeepDet/SpatialTransformCropper/add_1"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Floor"
  op: "Floor"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Cast_3"
  op: "Cast"
  input: "MSDeepDet/SpatialTransformCropper/Floor"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_2"
  op: "Add"
  input: "MSDeepDet/SpatialTransformCropper/Cast_3"
  input: "MSDeepDet/SpatialTransformCropper/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Floor_1"
  op: "Floor"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Cast_4"
  op: "Cast"
  input: "MSDeepDet/SpatialTransformCropper/Floor_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_3"
  op: "Add"
  input: "MSDeepDet/SpatialTransformCropper/Cast_4"
  input: "MSDeepDet/SpatialTransformCropper/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/clip_by_value"
  op: "ClipByValue"
  input: "MSDeepDet/SpatialTransformCropper/Cast_3"
  input: "MSDeepDet/SpatialTransformCropper/zeros"
  input: "MSDeepDet/SpatialTransformCropper/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/clip_by_value_1"
  op: "ClipByValue"
  input: "MSDeepDet/SpatialTransformCropper/add_2"
  input: "MSDeepDet/SpatialTransformCropper/zeros"
  input: "MSDeepDet/SpatialTransformCropper/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/clip_by_value_2"
  op: "ClipByValue"
  input: "MSDeepDet/SpatialTransformCropper/Cast_4"
  input: "MSDeepDet/SpatialTransformCropper/zeros"
  input: "MSDeepDet/SpatialTransformCropper/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/clip_by_value_3"
  op: "ClipByValue"
  input: "MSDeepDet/SpatialTransformCropper/add_3"
  input: "MSDeepDet/SpatialTransformCropper/zeros"
  input: "MSDeepDet/SpatialTransformCropper/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_3"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_2"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/strided_slice_9"
  op: "StridedSlice"
  input: "MSDeepDet/Reshape_4"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_9/stack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_9/stack_1"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000Q\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Tile_3"
  op: "Tile"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_9"
  input: "MSDeepDet/SpatialTransformCropper/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape_4"
  op: "Reshape"
  input: "MSDeepDet/SpatialTransformCropper/Tile_3"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_4"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_4"
  input: "MSDeepDet/SpatialTransformCropper/mul_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_5"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/clip_by_value_2"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_4"
  op: "Add"
  input: "MSDeepDet/SpatialTransformCropper/mul_4"
  input: "MSDeepDet/SpatialTransformCropper/mul_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_6"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/clip_by_value_3"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_5"
  op: "Add"
  input: "MSDeepDet/SpatialTransformCropper/mul_4"
  input: "MSDeepDet/SpatialTransformCropper/mul_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_6"
  op: "Add"
  input: "MSDeepDet/SpatialTransformCropper/add_4"
  input: "MSDeepDet/SpatialTransformCropper/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_7"
  op: "Add"
  input: "MSDeepDet/SpatialTransformCropper/add_5"
  input: "MSDeepDet/SpatialTransformCropper/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_8"
  op: "Add"
  input: "MSDeepDet/SpatialTransformCropper/add_4"
  input: "MSDeepDet/SpatialTransformCropper/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/add_9"
  op: "Add"
  input: "MSDeepDet/SpatialTransformCropper/add_5"
  input: "MSDeepDet/SpatialTransformCropper/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/stack_2/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/stack_2"
  op: "Pack"
  input: "MSDeepDet/SpatialTransformCropper/stack_2/0"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape_5"
  op: "Reshape"
  input: "MSDeepDet/mul_5"
  input: "MSDeepDet/SpatialTransformCropper/stack_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/GatherV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/GatherV2"
  op: "GatherV2"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_5"
  input: "MSDeepDet/SpatialTransformCropper/add_6"
  input: "MSDeepDet/SpatialTransformCropper/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/GatherV2_1"
  op: "GatherV2"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_5"
  input: "MSDeepDet/SpatialTransformCropper/add_7"
  input: "MSDeepDet/SpatialTransformCropper/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/GatherV2_2"
  op: "GatherV2"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_5"
  input: "MSDeepDet/SpatialTransformCropper/add_8"
  input: "MSDeepDet/SpatialTransformCropper/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/GatherV2_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/GatherV2_3"
  op: "GatherV2"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_5"
  input: "MSDeepDet/SpatialTransformCropper/add_9"
  input: "MSDeepDet/SpatialTransformCropper/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Cast_6"
  op: "Cast"
  input: "MSDeepDet/SpatialTransformCropper/clip_by_value"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Cast_7"
  op: "Cast"
  input: "MSDeepDet/SpatialTransformCropper/clip_by_value_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Cast_8"
  op: "Cast"
  input: "MSDeepDet/SpatialTransformCropper/clip_by_value_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Cast_9"
  op: "Cast"
  input: "MSDeepDet/SpatialTransformCropper/clip_by_value_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub_2"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/Cast_7"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub_3"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/Cast_9"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_7"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/sub_2"
  input: "MSDeepDet/SpatialTransformCropper/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_3"
  op: "ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/mul_7"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub_4"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/Cast_7"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub_5"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_3"
  input: "MSDeepDet/SpatialTransformCropper/Cast_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_8"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/sub_4"
  input: "MSDeepDet/SpatialTransformCropper/sub_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_4/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_4"
  op: "ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/mul_8"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_4/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub_6"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_2"
  input: "MSDeepDet/SpatialTransformCropper/Cast_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub_7"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/Cast_9"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_9"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/sub_6"
  input: "MSDeepDet/SpatialTransformCropper/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_5/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_5"
  op: "ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/mul_9"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_5/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub_8"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_2"
  input: "MSDeepDet/SpatialTransformCropper/Cast_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/sub_9"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_3"
  input: "MSDeepDet/SpatialTransformCropper/Cast_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_10"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/sub_8"
  input: "MSDeepDet/SpatialTransformCropper/sub_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_6/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/ExpandDims_6"
  op: "ExpandDims"
  input: "MSDeepDet/SpatialTransformCropper/mul_10"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_6/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_11"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_3"
  input: "MSDeepDet/SpatialTransformCropper/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_12"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_4"
  input: "MSDeepDet/SpatialTransformCropper/GatherV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_13"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_5"
  input: "MSDeepDet/SpatialTransformCropper/GatherV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/mul_14"
  op: "Mul"
  input: "MSDeepDet/SpatialTransformCropper/ExpandDims_6"
  input: "MSDeepDet/SpatialTransformCropper/GatherV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/AddN"
  op: "AddN"
  input: "MSDeepDet/SpatialTransformCropper/mul_11"
  input: "MSDeepDet/SpatialTransformCropper/mul_12"
  input: "MSDeepDet/SpatialTransformCropper/mul_13"
  input: "MSDeepDet/SpatialTransformCropper/mul_14"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/stack_3/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/stack_3/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/stack_3"
  op: "Pack"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_4"
  input: "MSDeepDet/SpatialTransformCropper/stack_3/1"
  input: "MSDeepDet/SpatialTransformCropper/stack_3/2"
  input: "MSDeepDet/SpatialTransformCropper/strided_slice_3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/SpatialTransformCropper/Reshape_6"
  op: "Reshape"
  input: "MSDeepDet/SpatialTransformCropper/AddN"
  input: "MSDeepDet/SpatialTransformCropper/stack_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/ones_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/ones_2"
  op: "Fill"
  input: "MSDeepDet/stack_2"
  input: "MSDeepDet/ones_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/LinSpace/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/LinSpace/stop"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/LinSpace/num"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "MSDeepDet/LinSpace"
  op: "LinSpace"
  input: "MSDeepDet/LinSpace/start"
  input: "MSDeepDet/LinSpace/stop"
  input: "MSDeepDet/LinSpace/num"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/ExpandDims_1"
  op: "ExpandDims"
  input: "MSDeepDet/LinSpace"
  input: "MSDeepDet/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/transpose_4/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/transpose_4"
  op: "Transpose"
  input: "MSDeepDet/ExpandDims_1"
  input: "MSDeepDet/transpose_4/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/MatMul"
  op: "MatMul"
  input: "MSDeepDet/ones_2"
  input: "MSDeepDet/transpose_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/LinSpace_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/LinSpace_1/stop"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/LinSpace_1/num"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "MSDeepDet/LinSpace_1"
  op: "LinSpace"
  input: "MSDeepDet/LinSpace_1/start"
  input: "MSDeepDet/LinSpace_1/stop"
  input: "MSDeepDet/LinSpace_1/num"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/ExpandDims_2"
  op: "ExpandDims"
  input: "MSDeepDet/LinSpace_1"
  input: "MSDeepDet/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\t\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/ones_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/ones_3"
  op: "Fill"
  input: "MSDeepDet/stack_3"
  input: "MSDeepDet/ones_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/MatMul_1"
  op: "MatMul"
  input: "MSDeepDet/ExpandDims_2"
  input: "MSDeepDet/ones_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/stack_4"
  op: "Pack"
  input: "MSDeepDet/MatMul"
  input: "MSDeepDet/MatMul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_14/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_14/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_14/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_14"
  op: "StridedSlice"
  input: "MSDeepDet/stack_4"
  input: "MSDeepDet/strided_slice_14/stack"
  input: "MSDeepDet/strided_slice_14/stack_1"
  input: "MSDeepDet/strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/Max_2/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/Max_2"
  op: "Max"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_6"
  input: "MSDeepDet/Max_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/sub_7"
  op: "Sub"
  input: "MSDeepDet/SpatialTransformCropper/Reshape_6"
  input: "MSDeepDet/Max_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/mul_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MSDeepDet/mul_11"
  op: "Mul"
  input: "MSDeepDet/mul_11/x"
  input: "MSDeepDet/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Exp_3"
  op: "Exp"
  input: "MSDeepDet/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Sum_5/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/Sum_5"
  op: "Sum"
  input: "MSDeepDet/Exp_3"
  input: "MSDeepDet/Sum_5/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "MSDeepDet/add_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "MSDeepDet/add_4"
  op: "Add"
  input: "MSDeepDet/Sum_5"
  input: "MSDeepDet/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/truediv_3"
  op: "RealDiv"
  input: "MSDeepDet/Exp_3"
  input: "MSDeepDet/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/mul_12"
  op: "Mul"
  input: "MSDeepDet/strided_slice_14"
  input: "MSDeepDet/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/Sum_6/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/Sum_6"
  op: "Sum"
  input: "MSDeepDet/mul_12"
  input: "MSDeepDet/Sum_6/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MSDeepDet/dxdy/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "MSDeepDet/dxdy"
      }
    }
  }
}
node {
  name: "MSDeepDet/dxdy"
  op: "HistogramSummary"
  input: "MSDeepDet/dxdy/tag"
  input: "MSDeepDet/Sum_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/ToFloat"
  op: "Cast"
  input: "MSDeepDet/concat_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_15/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_15/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_15/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "MSDeepDet/strided_slice_15"
  op: "StridedSlice"
  input: "MSDeepDet/GatherNd"
  input: "MSDeepDet/strided_slice_15/stack"
  input: "MSDeepDet/strided_slice_15/stack_1"
  input: "MSDeepDet/strided_slice_15/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "MSDeepDet/mul_13"
  op: "Mul"
  input: "MSDeepDet/Sum_6"
  input: "MSDeepDet/strided_slice_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/mul_14/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.0
      }
    }
  }
}
node {
  name: "MSDeepDet/mul_14"
  op: "Mul"
  input: "MSDeepDet/mul_13"
  input: "MSDeepDet/mul_14/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/truediv_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "MSDeepDet/truediv_4"
  op: "RealDiv"
  input: "MSDeepDet/mul_14"
  input: "MSDeepDet/truediv_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MSDeepDet/add_5"
  op: "Add"
  input: "MSDeepDet/ToFloat"
  input: "MSDeepDet/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/Identity"
  op: "Identity"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Shape"
  op: "Shape"
  input: "PatchExtract/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice"
  op: "StridedSlice"
  input: "PatchExtract/SpatialTransformCropper/Shape"
  input: "PatchExtract/SpatialTransformCropper/strided_slice/stack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice/stack_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Shape_1"
  op: "Shape"
  input: "PatchExtract/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_1"
  op: "StridedSlice"
  input: "PatchExtract/SpatialTransformCropper/Shape_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_1/stack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_1/stack_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Shape_2"
  op: "Shape"
  input: "PatchExtract/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_2"
  op: "StridedSlice"
  input: "PatchExtract/SpatialTransformCropper/Shape_2"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_2/stack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_2/stack_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Shape_3"
  op: "Shape"
  input: "PatchExtract/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_3"
  op: "StridedSlice"
  input: "PatchExtract/SpatialTransformCropper/Shape_3"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_3/stack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_3/stack_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Shape_4"
  op: "Shape"
  input: "MSDeepDet/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_4"
  op: "StridedSlice"
  input: "PatchExtract/SpatialTransformCropper/Shape_4"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_4/stack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_4/stack_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Shape_5"
  op: "Shape"
  input: "PatchExtract/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_5"
  op: "StridedSlice"
  input: "PatchExtract/SpatialTransformCropper/Shape_5"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_5/stack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_5/stack_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub"
  op: "Sub"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_5"
  input: "PatchExtract/SpatialTransformCropper/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Shape_6"
  op: "Shape"
  input: "PatchExtract/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_6"
  op: "StridedSlice"
  input: "PatchExtract/SpatialTransformCropper/Shape_6"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_6/stack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_6/stack_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub_1"
  op: "Sub"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_6"
  input: "PatchExtract/SpatialTransformCropper/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ones"
  op: "Fill"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/stack"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace/stop"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace/num"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace"
  op: "LinSpace"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace/start"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace/stop"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace/num"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ExpandDims"
  op: "ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/transpose"
  op: "Transpose"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/MatMul"
  op: "MatMul"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ones"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace_1/stop"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace_1/num"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace_1"
  op: "LinSpace"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace_1/start"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace_1/stop"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace_1/num"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ExpandDims_1"
  op: "ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/LinSpace_1"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ones_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ones_1"
  op: "Fill"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/stack_1"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ones_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/MatMul_1"
  op: "MatMul"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ExpandDims_1"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ones_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/Reshape"
  op: "Reshape"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/MatMul"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/Reshape_1"
  op: "Reshape"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/MatMul_1"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ones_like/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/ones_like"
  op: "Fill"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ones_like/Shape"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/meshgrid/concat"
  op: "ConcatV2"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/Reshape"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/Reshape_1"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/ones_like"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims"
  op: "ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/meshgrid/concat"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape"
  op: "Reshape"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/stack"
  op: "Pack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_4"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile"
  op: "Tile"
  input: "PatchExtract/SpatialTransformCropper/Reshape"
  input: "PatchExtract/SpatialTransformCropper/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/stack_1/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/stack_1"
  op: "Pack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_4"
  input: "PatchExtract/SpatialTransformCropper/stack_1/1"
  input: "PatchExtract/SpatialTransformCropper/stack_1/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_1"
  op: "Reshape"
  input: "PatchExtract/SpatialTransformCropper/Tile"
  input: "PatchExtract/SpatialTransformCropper/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/eye/ones"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/eye/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/eye/MatrixSetDiag"
  op: "MatrixSetDiag"
  input: "PatchExtract/SpatialTransformCropper/eye/zeros"
  input: "PatchExtract/SpatialTransformCropper/eye/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_7"
  op: "StridedSlice"
  input: "PatchExtract/SpatialTransformCropper/eye/MatrixSetDiag"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_7/stack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_7/stack_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile_1/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile_1/multiples"
  op: "Pack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_4"
  input: "PatchExtract/SpatialTransformCropper/Tile_1/multiples/1"
  input: "PatchExtract/SpatialTransformCropper/Tile_1/multiples/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile_1"
  op: "Tile"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_7"
  input: "PatchExtract/SpatialTransformCropper/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_8"
  op: "StridedSlice"
  input: "MSDeepDet/GatherNd"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_8/stack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_8/stack_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 6
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/Tile_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\200?"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile_2/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile_2/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile_2/multiples"
  op: "Pack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_4"
  input: "PatchExtract/SpatialTransformCropper/Tile_2/multiples/1"
  input: "PatchExtract/SpatialTransformCropper/Tile_2/multiples/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile_2"
  op: "Tile"
  input: "PatchExtract/SpatialTransformCropper/Const"
  input: "PatchExtract/SpatialTransformCropper/Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/concat"
  op: "ConcatV2"
  input: "PatchExtract/SpatialTransformCropper/mul"
  input: "PatchExtract/SpatialTransformCropper/Tile_2"
  input: "PatchExtract/SpatialTransformCropper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice"
  op: "Slice"
  input: "MSDeepDet/GatherNd_1"
  input: "PatchExtract/SpatialTransformCropper/Slice/begin"
  input: "PatchExtract/SpatialTransformCropper/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_1/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_1"
  op: "Slice"
  input: "MSDeepDet/GatherNd_1"
  input: "PatchExtract/SpatialTransformCropper/Slice_1/begin"
  input: "PatchExtract/SpatialTransformCropper/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/zeros_like"
  op: "ZerosLike"
  input: "PatchExtract/SpatialTransformCropper/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ones_like/Shape"
  op: "Shape"
  input: "PatchExtract/SpatialTransformCropper/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ones_like"
  op: "Fill"
  input: "PatchExtract/SpatialTransformCropper/ones_like/Shape"
  input: "PatchExtract/SpatialTransformCropper/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Neg"
  op: "Neg"
  input: "PatchExtract/SpatialTransformCropper/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/concat_1"
  op: "ConcatV2"
  input: "PatchExtract/SpatialTransformCropper/Slice"
  input: "PatchExtract/SpatialTransformCropper/Neg"
  input: "PatchExtract/SpatialTransformCropper/zeros_like"
  input: "PatchExtract/SpatialTransformCropper/Slice_1"
  input: "PatchExtract/SpatialTransformCropper/Slice"
  input: "PatchExtract/SpatialTransformCropper/zeros_like"
  input: "PatchExtract/SpatialTransformCropper/zeros_like"
  input: "PatchExtract/SpatialTransformCropper/zeros_like"
  input: "PatchExtract/SpatialTransformCropper/ones_like"
  input: "PatchExtract/SpatialTransformCropper/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_2"
  op: "Reshape"
  input: "PatchExtract/SpatialTransformCropper/concat_1"
  input: "PatchExtract/SpatialTransformCropper/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/MatMul"
  op: "BatchMatMul"
  input: "PatchExtract/SpatialTransformCropper/concat"
  input: "PatchExtract/SpatialTransformCropper/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/MatMul_1"
  op: "BatchMatMul"
  input: "PatchExtract/SpatialTransformCropper/MatMul"
  input: "PatchExtract/SpatialTransformCropper/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_2/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_2"
  op: "Slice"
  input: "PatchExtract/SpatialTransformCropper/MatMul_1"
  input: "PatchExtract/SpatialTransformCropper/Slice_2/begin"
  input: "PatchExtract/SpatialTransformCropper/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_3/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_3"
  op: "Slice"
  input: "PatchExtract/SpatialTransformCropper/MatMul_1"
  input: "PatchExtract/SpatialTransformCropper/Slice_3/begin"
  input: "PatchExtract/SpatialTransformCropper/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_1"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/Slice_2"
  input: "PatchExtract/SpatialTransformCropper/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/truediv"
  op: "RealDiv"
  input: "PatchExtract/SpatialTransformCropper/mul_1"
  input: "PatchExtract/SpatialTransformCropper/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_2"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/Slice_3"
  input: "PatchExtract/SpatialTransformCropper/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/truediv_1"
  op: "RealDiv"
  input: "PatchExtract/SpatialTransformCropper/mul_2"
  input: "PatchExtract/SpatialTransformCropper/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_4/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_4/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_4"
  op: "Slice"
  input: "MSDeepDet/add_5"
  input: "PatchExtract/SpatialTransformCropper/Slice_4/begin"
  input: "PatchExtract/SpatialTransformCropper/Slice_4/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_1"
  op: "ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/Slice_4"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_5/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_5/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Slice_5"
  op: "Slice"
  input: "MSDeepDet/add_5"
  input: "PatchExtract/SpatialTransformCropper/Slice_5/begin"
  input: "PatchExtract/SpatialTransformCropper/Slice_5/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_2"
  op: "ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/Slice_5"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add"
  op: "Add"
  input: "PatchExtract/SpatialTransformCropper/truediv"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_1"
  op: "Add"
  input: "PatchExtract/SpatialTransformCropper/truediv_1"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_3"
  op: "Reshape"
  input: "PatchExtract/SpatialTransformCropper/add"
  input: "PatchExtract/SpatialTransformCropper/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_4"
  op: "Reshape"
  input: "PatchExtract/SpatialTransformCropper/add_1"
  input: "PatchExtract/SpatialTransformCropper/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Floor"
  op: "Floor"
  input: "PatchExtract/SpatialTransformCropper/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Cast_2"
  op: "Cast"
  input: "PatchExtract/SpatialTransformCropper/Floor"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_2"
  op: "Add"
  input: "PatchExtract/SpatialTransformCropper/Cast_2"
  input: "PatchExtract/SpatialTransformCropper/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Floor_1"
  op: "Floor"
  input: "PatchExtract/SpatialTransformCropper/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Cast_3"
  op: "Cast"
  input: "PatchExtract/SpatialTransformCropper/Floor_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_3"
  op: "Add"
  input: "PatchExtract/SpatialTransformCropper/Cast_3"
  input: "PatchExtract/SpatialTransformCropper/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/clip_by_value"
  op: "ClipByValue"
  input: "PatchExtract/SpatialTransformCropper/Cast_2"
  input: "PatchExtract/SpatialTransformCropper/zeros"
  input: "PatchExtract/SpatialTransformCropper/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/clip_by_value_1"
  op: "ClipByValue"
  input: "PatchExtract/SpatialTransformCropper/add_2"
  input: "PatchExtract/SpatialTransformCropper/zeros"
  input: "PatchExtract/SpatialTransformCropper/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/clip_by_value_2"
  op: "ClipByValue"
  input: "PatchExtract/SpatialTransformCropper/Cast_3"
  input: "PatchExtract/SpatialTransformCropper/zeros"
  input: "PatchExtract/SpatialTransformCropper/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/clip_by_value_3"
  op: "ClipByValue"
  input: "PatchExtract/SpatialTransformCropper/add_3"
  input: "PatchExtract/SpatialTransformCropper/zeros"
  input: "PatchExtract/SpatialTransformCropper/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_3"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_2"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/strided_slice_9"
  op: "StridedSlice"
  input: "MSDeepDet/Reshape_4"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_9/stack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_9/stack_1"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Tile_3"
  op: "Tile"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_9"
  input: "PatchExtract/SpatialTransformCropper/Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_5"
  op: "Reshape"
  input: "PatchExtract/SpatialTransformCropper/Tile_3"
  input: "PatchExtract/SpatialTransformCropper/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_4"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/Reshape_5"
  input: "PatchExtract/SpatialTransformCropper/mul_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_5"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/clip_by_value_2"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_4"
  op: "Add"
  input: "PatchExtract/SpatialTransformCropper/mul_4"
  input: "PatchExtract/SpatialTransformCropper/mul_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_6"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/clip_by_value_3"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_5"
  op: "Add"
  input: "PatchExtract/SpatialTransformCropper/mul_4"
  input: "PatchExtract/SpatialTransformCropper/mul_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_6"
  op: "Add"
  input: "PatchExtract/SpatialTransformCropper/add_4"
  input: "PatchExtract/SpatialTransformCropper/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_7"
  op: "Add"
  input: "PatchExtract/SpatialTransformCropper/add_5"
  input: "PatchExtract/SpatialTransformCropper/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_8"
  op: "Add"
  input: "PatchExtract/SpatialTransformCropper/add_4"
  input: "PatchExtract/SpatialTransformCropper/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/add_9"
  op: "Add"
  input: "PatchExtract/SpatialTransformCropper/add_5"
  input: "PatchExtract/SpatialTransformCropper/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/stack_2/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/stack_2"
  op: "Pack"
  input: "PatchExtract/SpatialTransformCropper/stack_2/0"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_6"
  op: "Reshape"
  input: "PatchExtract/Identity"
  input: "PatchExtract/SpatialTransformCropper/stack_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/GatherV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/GatherV2"
  op: "GatherV2"
  input: "PatchExtract/SpatialTransformCropper/Reshape_6"
  input: "PatchExtract/SpatialTransformCropper/add_6"
  input: "PatchExtract/SpatialTransformCropper/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/GatherV2_1"
  op: "GatherV2"
  input: "PatchExtract/SpatialTransformCropper/Reshape_6"
  input: "PatchExtract/SpatialTransformCropper/add_7"
  input: "PatchExtract/SpatialTransformCropper/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/GatherV2_2"
  op: "GatherV2"
  input: "PatchExtract/SpatialTransformCropper/Reshape_6"
  input: "PatchExtract/SpatialTransformCropper/add_8"
  input: "PatchExtract/SpatialTransformCropper/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/GatherV2_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/GatherV2_3"
  op: "GatherV2"
  input: "PatchExtract/SpatialTransformCropper/Reshape_6"
  input: "PatchExtract/SpatialTransformCropper/add_9"
  input: "PatchExtract/SpatialTransformCropper/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Cast_5"
  op: "Cast"
  input: "PatchExtract/SpatialTransformCropper/clip_by_value"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Cast_6"
  op: "Cast"
  input: "PatchExtract/SpatialTransformCropper/clip_by_value_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Cast_7"
  op: "Cast"
  input: "PatchExtract/SpatialTransformCropper/clip_by_value_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Cast_8"
  op: "Cast"
  input: "PatchExtract/SpatialTransformCropper/clip_by_value_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub_2"
  op: "Sub"
  input: "PatchExtract/SpatialTransformCropper/Cast_6"
  input: "PatchExtract/SpatialTransformCropper/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub_3"
  op: "Sub"
  input: "PatchExtract/SpatialTransformCropper/Cast_8"
  input: "PatchExtract/SpatialTransformCropper/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_7"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/sub_2"
  input: "PatchExtract/SpatialTransformCropper/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_3"
  op: "ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/mul_7"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub_4"
  op: "Sub"
  input: "PatchExtract/SpatialTransformCropper/Cast_6"
  input: "PatchExtract/SpatialTransformCropper/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub_5"
  op: "Sub"
  input: "PatchExtract/SpatialTransformCropper/Reshape_4"
  input: "PatchExtract/SpatialTransformCropper/Cast_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_8"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/sub_4"
  input: "PatchExtract/SpatialTransformCropper/sub_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_4/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_4"
  op: "ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/mul_8"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_4/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub_6"
  op: "Sub"
  input: "PatchExtract/SpatialTransformCropper/Reshape_3"
  input: "PatchExtract/SpatialTransformCropper/Cast_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub_7"
  op: "Sub"
  input: "PatchExtract/SpatialTransformCropper/Cast_8"
  input: "PatchExtract/SpatialTransformCropper/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_9"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/sub_6"
  input: "PatchExtract/SpatialTransformCropper/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_5/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_5"
  op: "ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/mul_9"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_5/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub_8"
  op: "Sub"
  input: "PatchExtract/SpatialTransformCropper/Reshape_3"
  input: "PatchExtract/SpatialTransformCropper/Cast_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/sub_9"
  op: "Sub"
  input: "PatchExtract/SpatialTransformCropper/Reshape_4"
  input: "PatchExtract/SpatialTransformCropper/Cast_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_10"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/sub_8"
  input: "PatchExtract/SpatialTransformCropper/sub_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_6/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/ExpandDims_6"
  op: "ExpandDims"
  input: "PatchExtract/SpatialTransformCropper/mul_10"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_6/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_11"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_3"
  input: "PatchExtract/SpatialTransformCropper/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_12"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_4"
  input: "PatchExtract/SpatialTransformCropper/GatherV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_13"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_5"
  input: "PatchExtract/SpatialTransformCropper/GatherV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/mul_14"
  op: "Mul"
  input: "PatchExtract/SpatialTransformCropper/ExpandDims_6"
  input: "PatchExtract/SpatialTransformCropper/GatherV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/AddN"
  op: "AddN"
  input: "PatchExtract/SpatialTransformCropper/mul_11"
  input: "PatchExtract/SpatialTransformCropper/mul_12"
  input: "PatchExtract/SpatialTransformCropper/mul_13"
  input: "PatchExtract/SpatialTransformCropper/mul_14"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/stack_3/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/stack_3/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/stack_3"
  op: "Pack"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_4"
  input: "PatchExtract/SpatialTransformCropper/stack_3/1"
  input: "PatchExtract/SpatialTransformCropper/stack_3/2"
  input: "PatchExtract/SpatialTransformCropper/strided_slice_3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "PatchExtract/SpatialTransformCropper/Reshape_7"
  op: "Reshape"
  input: "PatchExtract/SpatialTransformCropper/AddN"
  input: "PatchExtract/SpatialTransformCropper/stack_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10127393901348114
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10127393901348114
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "SimpleDesc/conv1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "SimpleDesc/conv1/weights/Initializer/random_uniform/max"
  input: "SimpleDesc/conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "SimpleDesc/conv1/weights/Initializer/random_uniform/RandomUniform"
  input: "SimpleDesc/conv1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights/Initializer/random_uniform"
  op: "Add"
  input: "SimpleDesc/conv1/weights/Initializer/random_uniform/mul"
  input: "SimpleDesc/conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights/Assign"
  op: "Assign"
  input: "SimpleDesc/conv1/weights"
  input: "SimpleDesc/conv1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights/read"
  op: "Identity"
  input: "SimpleDesc/conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/conv1/biases/Assign"
  op: "Assign"
  input: "SimpleDesc/conv1/biases"
  input: "SimpleDesc/conv1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/conv1/biases/read"
  op: "Identity"
  input: "SimpleDesc/conv1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv1/biases"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "SimpleDesc/conv1/weights_1"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/weights_1"
  op: "HistogramSummary"
  input: "SimpleDesc/conv1/weights_1/tag"
  input: "SimpleDesc/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/conv1/biases_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "SimpleDesc/conv1/biases_1"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv1/biases_1"
  op: "HistogramSummary"
  input: "SimpleDesc/conv1/biases_1/tag"
  input: "SimpleDesc/conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/conv1/Conv2D"
  op: "Conv2D"
  input: "PatchExtract/SpatialTransformCropper/Reshape_7"
  input: "SimpleDesc/conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/conv1/BiasAdd"
  op: "BiasAdd"
  input: "SimpleDesc/conv1/Conv2D"
  input: "SimpleDesc/conv1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SimpleDesc/bn1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn1/gamma/Assign"
  op: "Assign"
  input: "SimpleDesc/bn1/gamma"
  input: "SimpleDesc/bn1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn1/gamma/read"
  op: "Identity"
  input: "SimpleDesc/bn1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/gamma"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn1/beta/Assign"
  op: "Assign"
  input: "SimpleDesc/bn1/beta"
  input: "SimpleDesc/bn1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn1/beta/read"
  op: "Identity"
  input: "SimpleDesc/bn1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/beta"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn1/moving_mean/Assign"
  op: "Assign"
  input: "SimpleDesc/bn1/moving_mean"
  input: "SimpleDesc/bn1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn1/moving_mean/read"
  op: "Identity"
  input: "SimpleDesc/bn1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/moving_mean"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn1/moving_variance/Assign"
  op: "Assign"
  input: "SimpleDesc/bn1/moving_variance"
  input: "SimpleDesc/bn1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn1/moving_variance/read"
  op: "Identity"
  input: "SimpleDesc/bn1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn1/moving_variance"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "SimpleDesc/conv1/BiasAdd"
  input: "SimpleDesc/bn1/gamma/read"
  input: "SimpleDesc/bn1/beta/read"
  input: "SimpleDesc/bn1/moving_mean/read"
  input: "SimpleDesc/bn1/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SimpleDesc/bn1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "SimpleDesc/Relu"
  op: "Relu"
  input: "SimpleDesc/bn1/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0589255653321743
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0589255653321743
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "SimpleDesc/conv2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "SimpleDesc/conv2/weights/Initializer/random_uniform/max"
  input: "SimpleDesc/conv2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "SimpleDesc/conv2/weights/Initializer/random_uniform/RandomUniform"
  input: "SimpleDesc/conv2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights/Initializer/random_uniform"
  op: "Add"
  input: "SimpleDesc/conv2/weights/Initializer/random_uniform/mul"
  input: "SimpleDesc/conv2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights/Assign"
  op: "Assign"
  input: "SimpleDesc/conv2/weights"
  input: "SimpleDesc/conv2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights/read"
  op: "Identity"
  input: "SimpleDesc/conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/conv2/biases/Assign"
  op: "Assign"
  input: "SimpleDesc/conv2/biases"
  input: "SimpleDesc/conv2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/conv2/biases/read"
  op: "Identity"
  input: "SimpleDesc/conv2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv2/biases"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "SimpleDesc/conv2/weights_1"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/weights_1"
  op: "HistogramSummary"
  input: "SimpleDesc/conv2/weights_1/tag"
  input: "SimpleDesc/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/conv2/biases_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "SimpleDesc/conv2/biases_1"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv2/biases_1"
  op: "HistogramSummary"
  input: "SimpleDesc/conv2/biases_1/tag"
  input: "SimpleDesc/conv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/conv2/Conv2D"
  op: "Conv2D"
  input: "SimpleDesc/Relu"
  input: "SimpleDesc/conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/conv2/BiasAdd"
  op: "BiasAdd"
  input: "SimpleDesc/conv2/Conv2D"
  input: "SimpleDesc/conv2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SimpleDesc/bn2/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn2/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn2/gamma/Assign"
  op: "Assign"
  input: "SimpleDesc/bn2/gamma"
  input: "SimpleDesc/bn2/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn2/gamma/read"
  op: "Identity"
  input: "SimpleDesc/bn2/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/gamma"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn2/beta/Assign"
  op: "Assign"
  input: "SimpleDesc/bn2/beta"
  input: "SimpleDesc/bn2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn2/beta/read"
  op: "Identity"
  input: "SimpleDesc/bn2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/beta"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn2/moving_mean/Assign"
  op: "Assign"
  input: "SimpleDesc/bn2/moving_mean"
  input: "SimpleDesc/bn2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn2/moving_mean/read"
  op: "Identity"
  input: "SimpleDesc/bn2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/moving_mean"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn2/moving_variance/Assign"
  op: "Assign"
  input: "SimpleDesc/bn2/moving_variance"
  input: "SimpleDesc/bn2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn2/moving_variance/read"
  op: "Identity"
  input: "SimpleDesc/bn2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn2/moving_variance"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "SimpleDesc/conv2/BiasAdd"
  input: "SimpleDesc/bn2/gamma/read"
  input: "SimpleDesc/bn2/beta/read"
  input: "SimpleDesc/bn2/moving_mean/read"
  input: "SimpleDesc/bn2/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SimpleDesc/bn2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "SimpleDesc/Relu_1"
  op: "Relu"
  input: "SimpleDesc/bn2/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0416666679084301
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0416666679084301
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "SimpleDesc/conv3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "SimpleDesc/conv3/weights/Initializer/random_uniform/max"
  input: "SimpleDesc/conv3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "SimpleDesc/conv3/weights/Initializer/random_uniform/RandomUniform"
  input: "SimpleDesc/conv3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights/Initializer/random_uniform"
  op: "Add"
  input: "SimpleDesc/conv3/weights/Initializer/random_uniform/mul"
  input: "SimpleDesc/conv3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights/Assign"
  op: "Assign"
  input: "SimpleDesc/conv3/weights"
  input: "SimpleDesc/conv3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights/read"
  op: "Identity"
  input: "SimpleDesc/conv3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/conv3/biases/Assign"
  op: "Assign"
  input: "SimpleDesc/conv3/biases"
  input: "SimpleDesc/conv3/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/conv3/biases/read"
  op: "Identity"
  input: "SimpleDesc/conv3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/conv3/biases"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "SimpleDesc/conv3/weights_1"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/weights_1"
  op: "HistogramSummary"
  input: "SimpleDesc/conv3/weights_1/tag"
  input: "SimpleDesc/conv3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/conv3/biases_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "SimpleDesc/conv3/biases_1"
      }
    }
  }
}
node {
  name: "SimpleDesc/conv3/biases_1"
  op: "HistogramSummary"
  input: "SimpleDesc/conv3/biases_1/tag"
  input: "SimpleDesc/conv3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/conv3/Conv2D"
  op: "Conv2D"
  input: "SimpleDesc/Relu_1"
  input: "SimpleDesc/conv3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/conv3/BiasAdd"
  op: "BiasAdd"
  input: "SimpleDesc/conv3/Conv2D"
  input: "SimpleDesc/conv3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SimpleDesc/bn3/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn3/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn3/gamma/Assign"
  op: "Assign"
  input: "SimpleDesc/bn3/gamma"
  input: "SimpleDesc/bn3/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn3/gamma/read"
  op: "Identity"
  input: "SimpleDesc/bn3/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/gamma"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn3/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn3/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn3/beta/Assign"
  op: "Assign"
  input: "SimpleDesc/bn3/beta"
  input: "SimpleDesc/bn3/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn3/beta/read"
  op: "Identity"
  input: "SimpleDesc/bn3/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/beta"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn3/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn3/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn3/moving_mean/Assign"
  op: "Assign"
  input: "SimpleDesc/bn3/moving_mean"
  input: "SimpleDesc/bn3/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn3/moving_mean/read"
  op: "Identity"
  input: "SimpleDesc/bn3/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/moving_mean"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn3/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SimpleDesc/bn3/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/bn3/moving_variance/Assign"
  op: "Assign"
  input: "SimpleDesc/bn3/moving_variance"
  input: "SimpleDesc/bn3/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/bn3/moving_variance/read"
  op: "Identity"
  input: "SimpleDesc/bn3/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/bn3/moving_variance"
      }
    }
  }
}
node {
  name: "SimpleDesc/bn3/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "SimpleDesc/conv3/BiasAdd"
  input: "SimpleDesc/bn3/gamma/read"
  input: "SimpleDesc/bn3/beta/read"
  input: "SimpleDesc/bn3/moving_mean/read"
  input: "SimpleDesc/bn3/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SimpleDesc/bn3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "SimpleDesc/Relu_2"
  op: "Relu"
  input: "SimpleDesc/bn3/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/flatten/Shape"
  op: "Shape"
  input: "SimpleDesc/Relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SimpleDesc/flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SimpleDesc/flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SimpleDesc/flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SimpleDesc/flatten/strided_slice"
  op: "StridedSlice"
  input: "SimpleDesc/flatten/Shape"
  input: "SimpleDesc/flatten/strided_slice/stack"
  input: "SimpleDesc/flatten/strided_slice/stack_1"
  input: "SimpleDesc/flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SimpleDesc/flatten/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "SimpleDesc/flatten/Reshape/shape"
  op: "Pack"
  input: "SimpleDesc/flatten/strided_slice"
  input: "SimpleDesc/flatten/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SimpleDesc/flatten/Reshape"
  op: "Reshape"
  input: "SimpleDesc/Relu_2"
  input: "SimpleDesc/flatten/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\020\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03608439117670059
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03608439117670059
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "SimpleDesc/fc1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "SimpleDesc/fc1/weights/Initializer/random_uniform/max"
  input: "SimpleDesc/fc1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "SimpleDesc/fc1/weights/Initializer/random_uniform/RandomUniform"
  input: "SimpleDesc/fc1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights/Initializer/random_uniform"
  op: "Add"
  input: "SimpleDesc/fc1/weights/Initializer/random_uniform/mul"
  input: "SimpleDesc/fc1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights/Assign"
  op: "Assign"
  input: "SimpleDesc/fc1/weights"
  input: "SimpleDesc/fc1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights/read"
  op: "Identity"
  input: "SimpleDesc/fc1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/fc1/biases/Assign"
  op: "Assign"
  input: "SimpleDesc/fc1/biases"
  input: "SimpleDesc/fc1/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/fc1/biases/read"
  op: "Identity"
  input: "SimpleDesc/fc1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc1/biases"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "SimpleDesc/fc1/weights_1"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/weights_1"
  op: "HistogramSummary"
  input: "SimpleDesc/fc1/weights_1/tag"
  input: "SimpleDesc/fc1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc1/biases_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "SimpleDesc/fc1/biases_1"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc1/biases_1"
  op: "HistogramSummary"
  input: "SimpleDesc/fc1/biases_1/tag"
  input: "SimpleDesc/fc1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc1/MatMul"
  op: "MatMul"
  input: "SimpleDesc/flatten/Reshape"
  input: "SimpleDesc/fc1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "SimpleDesc/fc1/BiasAdd"
  op: "BiasAdd"
  input: "SimpleDesc/fc1/MatMul"
  input: "SimpleDesc/fc1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/gamma/Assign"
  op: "Assign"
  input: "SimpleDesc/fc-bn1/gamma"
  input: "SimpleDesc/fc-bn1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/gamma/read"
  op: "Identity"
  input: "SimpleDesc/fc-bn1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/gamma"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/beta/Assign"
  op: "Assign"
  input: "SimpleDesc/fc-bn1/beta"
  input: "SimpleDesc/fc-bn1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/beta/read"
  op: "Identity"
  input: "SimpleDesc/fc-bn1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/beta"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moving_mean/Assign"
  op: "Assign"
  input: "SimpleDesc/fc-bn1/moving_mean"
  input: "SimpleDesc/fc-bn1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moving_mean/read"
  op: "Identity"
  input: "SimpleDesc/fc-bn1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/moving_mean"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moving_variance/Assign"
  op: "Assign"
  input: "SimpleDesc/fc-bn1/moving_variance"
  input: "SimpleDesc/fc-bn1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moving_variance/read"
  op: "Identity"
  input: "SimpleDesc/fc-bn1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc-bn1/moving_variance"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moments/mean"
  op: "Mean"
  input: "SimpleDesc/fc1/BiasAdd"
  input: "SimpleDesc/fc-bn1/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moments/StopGradient"
  op: "StopGradient"
  input: "SimpleDesc/fc-bn1/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "SimpleDesc/fc1/BiasAdd"
  input: "SimpleDesc/fc-bn1/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moments/variance"
  op: "Mean"
  input: "SimpleDesc/fc-bn1/moments/SquaredDifference"
  input: "SimpleDesc/fc-bn1/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moments/Squeeze"
  op: "Squeeze"
  input: "SimpleDesc/fc-bn1/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/moments/Squeeze_1"
  op: "Squeeze"
  input: "SimpleDesc/fc-bn1/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-06
      }
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/batchnorm/add"
  op: "Add"
  input: "SimpleDesc/fc-bn1/moving_variance/read"
  input: "SimpleDesc/fc-bn1/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "SimpleDesc/fc-bn1/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/batchnorm/mul"
  op: "Mul"
  input: "SimpleDesc/fc-bn1/batchnorm/Rsqrt"
  input: "SimpleDesc/fc-bn1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/batchnorm/mul_1"
  op: "Mul"
  input: "SimpleDesc/fc1/BiasAdd"
  input: "SimpleDesc/fc-bn1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/batchnorm/mul_2"
  op: "Mul"
  input: "SimpleDesc/fc-bn1/moving_mean/read"
  input: "SimpleDesc/fc-bn1/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/batchnorm/sub"
  op: "Sub"
  input: "SimpleDesc/fc-bn1/beta/read"
  input: "SimpleDesc/fc-bn1/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc-bn1/batchnorm/add_1"
  op: "Add"
  input: "SimpleDesc/fc-bn1/batchnorm/mul_1"
  input: "SimpleDesc/fc-bn1/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/Relu_3"
  op: "Relu"
  input: "SimpleDesc/fc-bn1/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0883883461356163
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0883883461356163
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "SimpleDesc/fc2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "SimpleDesc/fc2/weights/Initializer/random_uniform/max"
  input: "SimpleDesc/fc2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "SimpleDesc/fc2/weights/Initializer/random_uniform/RandomUniform"
  input: "SimpleDesc/fc2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights/Initializer/random_uniform"
  op: "Add"
  input: "SimpleDesc/fc2/weights/Initializer/random_uniform/mul"
  input: "SimpleDesc/fc2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights/Assign"
  op: "Assign"
  input: "SimpleDesc/fc2/weights"
  input: "SimpleDesc/fc2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights/read"
  op: "Identity"
  input: "SimpleDesc/fc2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/weights"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "SimpleDesc/fc2/biases/Assign"
  op: "Assign"
  input: "SimpleDesc/fc2/biases"
  input: "SimpleDesc/fc2/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/fc2/biases/read"
  op: "Identity"
  input: "SimpleDesc/fc2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SimpleDesc/fc2/biases"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "SimpleDesc/fc2/weights_1"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/weights_1"
  op: "HistogramSummary"
  input: "SimpleDesc/fc2/weights_1/tag"
  input: "SimpleDesc/fc2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc2/biases_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "SimpleDesc/fc2/biases_1"
      }
    }
  }
}
node {
  name: "SimpleDesc/fc2/biases_1"
  op: "HistogramSummary"
  input: "SimpleDesc/fc2/biases_1/tag"
  input: "SimpleDesc/fc2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/fc2/MatMul"
  op: "MatMul"
  input: "SimpleDesc/Relu_3"
  input: "SimpleDesc/fc2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "SimpleDesc/fc2/BiasAdd"
  op: "BiasAdd"
  input: "SimpleDesc/fc2/MatMul"
  input: "SimpleDesc/fc2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SimpleDesc/l2_normalize/Square"
  op: "Square"
  input: "SimpleDesc/fc2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/l2_normalize/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SimpleDesc/l2_normalize/Sum"
  op: "Sum"
  input: "SimpleDesc/l2_normalize/Square"
  input: "SimpleDesc/l2_normalize/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "SimpleDesc/l2_normalize/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "SimpleDesc/l2_normalize/Maximum"
  op: "Maximum"
  input: "SimpleDesc/l2_normalize/Sum"
  input: "SimpleDesc/l2_normalize/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/l2_normalize/Rsqrt"
  op: "Rsqrt"
  input: "SimpleDesc/l2_normalize/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SimpleDesc/l2_normalize"
  op: "Mul"
  input: "SimpleDesc/fc2/BiasAdd"
  input: "SimpleDesc/l2_normalize/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "Slice"
  op: "Slice"
  input: "MSDeepDet/ConvOnlyResNet/l2_normalize"
  input: "Slice/begin"
  input: "Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Slice_1/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_1"
  op: "Slice"
  input: "MSDeepDet/ConvOnlyResNet/l2_normalize"
  input: "Slice_1/begin"
  input: "Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Atan2"
  op: "Atan2"
  input: "Slice_1"
  input: "Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 360
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\200?\000\000\000\000\000\000\000\000\000\000\200?\200\210\210<\000\000\000\000\000\000\200?\220\210\010=\000\000\000\000\000\000\200?\320\314L=\000\000\000\000\000\000\200?\210\210\210=\000\000\000\000\000\000\200?\250\252\252=\000\000\000\000\000\000\200?\320\314\314=\000\000\000\000\000\000\200?\360\356\356=\000\000\000\000\000\000\200?\210\210\010>\000\000\000\000\000\000\200?\230\231\031>\000\000\000\000\000\000\200?\254\252*>\000\000\000\000\000\000\200?\274\273;>\000\000\000\000\000\000\200?\320\314L>\000\000\000\000\000\000\200?\340\335]>\000\000\000\000\000\000\200?\360\356n>\000\000\000\000\000\000\200?\000\000\200>\000\000\000\000\000\000\200?\210\210\210>\000\000\000\000\000\000\200?\022\021\221>\000\000\000\000\000\000\200?\232\231\231>\000\000\000\000\000\000\200?$\"\242>\000\000\000\000\000\000\200?\254\252\252>\000\000\000\000\000\000\200?43\263>\000\000\000\000\000\000\200?\274\273\273>\000\000\000\000\000\000\200?DD\304>\000\000\000\000\000\000\200?\316\314\314>\000\000\000\000\000\000\200?VU\325>\000\000\000\000\000\000\200?\340\335\335>\000\000\000\000\000\000\200?hf\346>\000\000\000\000\000\000\200?\360\356\356>\000\000\000\000\000\000\200?xw\367>\000\000\000\000\000\000\200?\000\000\000?\000\000\000\000\000\000\200?ED\004?\000\000\000\000\000\000\200?\211\210\010?\000\000\000\000\000\000\200?\315\314\014?\000\000\000\000\000\000\200?\022\021\021?\000\000\000\000\000\000\200?VU\025?\000\000\000\000\000\000\200?\232\231\031?\000\000\000\000\000\000\200?\336\335\035?\000\000\000\000\000\000\200?#\"\"?\000\000\000\000\000\000\200?gf&?\000\000\000\000\000\000\200?\253\252*?\000\000\000\000\000\000\200?\360\356.?\000\000\000\000\000\000\200?433?\000\000\000\000\000\000\200?xw7?\000\000\000\000\000\000\200?\274\273;?\000\000\000\000\000\000\200?\001\000@?\000\000\000\000\000\000\200?EDD?\000\000\000\000\000\000\200?\211\210H?\000\000\000\000\000\000\200?\316\314L?\000\000\000\000\000\000\200?\022\021Q?\000\000\000\000\000\000\200?VUU?\000\000\000\000\000\000\200?\232\231Y?\000\000\000\000\000\000\200?\337\335]?\000\000\000\000\000\000\200?#\"b?\000\000\000\000\000\000\200?gff?\000\000\000\000\000\000\200?\253\252j?\000\000\000\000\000\000\200?\360\356n?\000\000\000\000\000\000\200?43s?\000\000\000\000\000\000\200?xww?\000\000\000\000\000\000\200?\275\273{?\000\000\000\000\000\000\200?\000\000\200?\000\000\000\000\272\273{?\000\000\200?\000\000\000\000vww?\000\000\200?\000\000\000\00023s?\000\000\200?\000\000\000\000\356\356n?\000\000\200?\000\000\000\000\252\252j?\000\000\200?\000\000\000\000fff?\000\000\200?\000\000\000\000\"\"b?\000\000\200?\000\000\000\000\334\335]?\000\000\200?\000\000\000\000\230\231Y?\000\000\200?\000\000\000\000TUU?\000\000\200?\000\000\000\000\020\021Q?\000\000\200?\000\000\000\000\314\314L?\000\000\200?\000\000\000\000\210\210H?\000\000\200?\000\000\000\000DDD?\000\000\200?\000\000\000\000\376\377??\000\000\200?\000\000\000\000\272\273;?\000\000\200?\000\000\000\000vw7?\000\000\200?\000\000\000\000233?\000\000\200?\000\000\000\000\356\356.?\000\000\200?\000\000\000\000\252\252*?\000\000\200?\000\000\000\000ff&?\000\000\200?\000\000\000\000 \"\"?\000\000\200?\000\000\000\000\334\335\035?\000\000\200?\000\000\000\000\230\231\031?\000\000\200?\000\000\000\000TU\025?\000\000\200?\000\000\000\000\020\021\021?\000\000\200?\000\000\000\000\314\314\014?\000\000\200?\000\000\000\000\210\210\010?\000\000\200?\000\000\000\000BD\004?\000\000\200?\000\000\000\000\374\377\377>\000\000\200?\000\000\000\000tw\367>\000\000\200?\000\000\000\000\354\356\356>\000\000\200?\000\000\000\000df\346>\000\000\200?\000\000\000\000\334\335\335>\000\000\200?\000\000\000\000TU\325>\000\000\200?\000\000\000\000\310\314\314>\000\000\200?\000\000\000\000@D\304>\000\000\200?\000\000\000\000\270\273\273>\000\000\200?\000\000\000\00003\263>\000\000\200?\000\000\000\000\250\252\252>\000\000\200?\000\000\000\000 \"\242>\000\000\200?\000\000\000\000\230\231\231>\000\000\200?\000\000\000\000\020\021\221>\000\000\200?\000\000\000\000\204\210\210>\000\000\200?\000\000\000\000\370\377\177>\000\000\200?\000\000\000\000\350\356n>\000\000\200?\000\000\000\000\330\335]>\000\000\200?\000\000\000\000\310\314L>\000\000\200?\000\000\000\000\270\273;>\000\000\200?\000\000\000\000\250\252*>\000\000\200?\000\000\000\000\220\231\031>\000\000\200?\000\000\000\000\200\210\010>\000\000\200?\000\000\000\000\340\356\356=\000\000\200?\000\000\000\000\300\314\314=\000\000\200?\000\000\000\000\240\252\252=\000\000\200?\000\000\000\000\200\210\210=\000\000\200?\000\000\000\000\300\314L=\000\000\200?\000\000\000\000`\210\010=\000\000\200?\000\000\000\000@\210\210<\000\000\200?\000\000\000\000\000\000\000\000\000\000\200?\000\000\000\000\000\000\000\000\000\000\200?\000\211\210<\000\000\000\000\000\000\200?\300\210\010=\000\000\000\000\000\000\200?\000\315L=\000\000\000\000\000\000\200?\240\210\210=\000\000\000\000\000\000\200?\300\252\252=\000\000\000\000\000\000\200?\340\314\314=\000\000\000\000\000\000\200?\000\357\356=\000\000\000\000\000\000\200?\220\210\010>\000\000\000\000\000\000\200?\240\231\031>\000\000\000\000\000\000\200?\260\252*>\000\000\000\000\000\000\200?\300\273;>\000\000\000\000\000\000\200?\320\314L>\000\000\000\000\000\000\200?\340\335]>\000\000\000\000\000\000\200?\360\356n>\000\000\000\000\000\000\200?\000\000\200>\000\000\000\000\000\000\200?\220\210\210>\000\000\000\000\000\000\200?\030\021\221>\000\000\000\000\000\000\200?\240\231\231>\000\000\000\000\000\000\200?(\"\242>\000\000\000\000\000\000\200?\260\252\252>\000\000\000\000\000\000\200?83\263>\000\000\000\000\000\000\200?\300\273\273>\000\000\000\000\000\000\200?HD\304>\000\000\000\000\000\000\200?\320\314\314>\000\000\000\000\000\000\200?XU\325>\000\000\000\000\000\000\200?\340\335\335>\000\000\000\000\000\000\200?hf\346>\000\000\000\000\000\000\200?\360\356\356>\000\000\000\000\000\000\200?xw\367>\000\000\000\000\000\000\200?\004\000\000?\000\000\000\000\000\000\200?HD\004?\000\000\000\000\000\000\200?\214\210\010?\000\000\000\000\000\000\200?\320\314\014?\000\000\000\000\000\000\200?\024\021\021?\000\000\000\000\000\000\200?XU\025?\000\000\000\000\000\000\200?\234\231\031?\000\000\000\000\000\000\200?\340\335\035?\000\000\000\000\000\000\200?$\"\"?\000\000\000\000\000\000\200?hf&?\000\000\000\000\000\000\200?\254\252*?\000\000\000\000\000\000\200?\360\356.?\000\000\000\000\000\000\200?433?\000\000\000\000\000\000\200?xw7?\000\000\000\000\000\000\200?\300\273;?\000\000\000\000\000\000\200?\004\000@?\000\000\000\000\000\000\200?HDD?\000\000\000\000\000\000\200?\214\210H?\000\000\000\000\000\000\200?\320\314L?\000\000\000\000\000\000\200?\024\021Q?\000\000\000\000\000\000\200?XUU?\000\000\000\000\000\000\200?\234\231Y?\000\000\000\000\000\000\200?\340\335]?\000\000\000\000\000\000\200?$\"b?\000\000\000\000\000\000\200?hff?\000\000\000\000\000\000\200?\254\252j?\000\000\000\000\000\000\200?\360\356n?\000\000\000\000\000\000\200?43s?\000\000\000\000\000\000\200?|ww?\000\000\000\000\000\000\200?\300\273{?\000\000\000\000\374\377\177?\000\000\200?\000\000\000\000\270\273{?\000\000\200?\000\000\000\000tww?\000\000\200?\000\000\000\00003s?\000\000\200?\000\000\000\000\354\356n?\000\000\200?\000\000\000\000\250\252j?\000\000\200?\000\000\000\000dff?\000\000\200?\000\000\000\000 \"b?\000\000\200?\000\000\000\000\334\335]?\000\000\200?\000\000\000\000\230\231Y?\000\000\200?\000\000\000\000TUU?\000\000\200?\000\000\000\000\020\021Q?\000\000\200?\000\000\000\000\310\314L?\000\000\200?\000\000\000\000\204\210H?\000\000\200?\000\000\000\000@DD?\000\000\200?\000\000\000\000\374\377??\000\000\200?\000\000\000\000\270\273;?\000\000\200?\000\000\000\000tw7?\000\000\200?\000\000\000\000033?\000\000\200?\000\000\000\000\354\356.?\000\000\200?\000\000\000\000\250\252*?\000\000\200?\000\000\000\000df&?\000\000\200?\000\000\000\000 \"\"?\000\000\200?\000\000\000\000\334\335\035?\000\000\200?\000\000\000\000\230\231\031?\000\000\200?\000\000\000\000TU\025?\000\000\200?\000\000\000\000\020\021\021?\000\000\200?\000\000\000\000\310\314\014?\000\000\200?\000\000\000\000\204\210\010?\000\000\200?\000\000\000\000@D\004?\000\000\200?\000\000\000\000\370\377\377>\000\000\200?\000\000\000\000pw\367>\000\000\200?\000\000\000\000\350\356\356>\000\000\200?\000\000\000\000`f\346>\000\000\200?\000\000\000\000\330\335\335>\000\000\200?\000\000\000\000PU\325>\000\000\200?\000\000\000\000\310\314\314>\000\000\200?\000\000\000\000@D\304>\000\000\200?\000\000\000\000\270\273\273>\000\000\200?\000\000\000\00003\263>\000\000\200?\000\000\000\000\250\252\252>\000\000\200?\000\000\000\000\030\"\242>\000\000\200?\000\000\000\000\220\231\231>\000\000\200?\000\000\000\000\010\021\221>\000\000\200?\000\000\000\000\200\210\210>\000\000\200?\000\000\000\000\360\377\177>\000\000\200?\000\000\000\000\340\356n>\000\000\200?\000\000\000\000\320\335]>\000\000\200?\000\000\000\000\300\314L>\000\000\200?\000\000\000\000\260\273;>\000\000\200?\000\000\000\000\240\252*>\000\000\200?\000\000\000\000\220\231\031>\000\000\200?\000\000\000\000\200\210\010>\000\000\200?\000\000\000\000\340\356\356=\000\000\200?\000\000\000\000\300\314\314=\000\000\200?\000\000\000\000\200\252\252=\000\000\200?\000\000\000\000`\210\210=\000\000\200?\000\000\000\000\200\314L=\000\000\200?\000\000\000\000@\210\010=\000\000\200?\000\000\000\000\000\210\210<\000\000\200?\000\000\000\000\000\000\000\000\000\000\200?\000\211\210<\000\000\000\000\000\000\200?\000\211\010=\000\000\000\000\000\000\200?\000\315L=\000\000\000\000\000\000\200?\300\210\210=\000\000\000\000\000\000\200?\300\252\252=\000\000\000\000\000\000\200?\000\315\314=\000\000\000\000\000\000\200?\000\357\356=\000\000\000\000\000\000\200?\240\210\010>\000\000\000\000\000\000\200?\240\231\031>\000\000\000\000\000\000\200?\300\252*>\000\000\000\000\000\000\200?\300\273;>\000\000\000\000\000\000\200?\340\314L>\000\000\000\000\000\000\200?\340\335]>\000\000\000\000\000\000\200?\000\357n>\000\000\000\000\000\000\200?\000\000\200>\000\000\000\000\000\000\200?\220\210\210>\000\000\000\000\000\000\200? \021\221>\000\000\000\000\000\000\200?\240\231\231>\000\000\000\000\000\000\200?0\"\242>\000\000\000\000\000\000\200?\260\252\252>\000\000\000\000\000\000\200?@3\263>\000\000\000\000\000\000\200?\300\273\273>\000\000\000\000\000\000\200?PD\304>\000\000\000\000\000\000\200?\320\314\314>\000\000\000\000\000\000\200?`U\325>\000\000\000\000\000\000\200?\340\335\335>\000\000\000\000\000\000\200?pf\346>\000\000\000\000\000\000\200?\360\356\356>\000\000\000\000\000\000\200?\200w\367>\000\000\000\000\000\000\200?\000\000\000?\000\000\000\000\000\000\200?HD\004?\000\000\000\000\000\000\200?\220\210\010?\000\000\000\000\000\000\200?\320\314\014?\000\000\000\000\000\000\200?\030\021\021?\000\000\000\000\000\000\200?XU\025?\000\000\000\000\000\000\200?\240\231\031?\000\000\000\000\000\000\200?\340\335\035?\000\000\000\000\000\000\200?(\"\"?\000\000\000\000\000\000\200?hf&?\000\000\000\000\000\000\200?\260\252*?\000\000\000\000\000\000\200?\360\356.?\000\000\000\000\000\000\200?833?\000\000\000\000\000\000\200?xw7?\000\000\000\000\000\000\200?\300\273;?\000\000\000\000\000\000\200?\010\000@?\000\000\000\000\000\000\200?HDD?\000\000\000\000\000\000\200?\220\210H?\000\000\000\000\000\000\200?\320\314L?\000\000\000\000\000\000\200?\030\021Q?\000\000\000\000\000\000\200?XUU?\000\000\000\000\000\000\200?\240\231Y?\000\000\000\000\000\000\200?\340\335]?\000\000\000\000\000\000\200?(\"b?\000\000\000\000\000\000\200?hff?\000\000\000\000\000\000\200?\260\252j?\000\000\000\000\000\000\200?\360\356n?\000\000\000\000\000\000\200?83s?\000\000\000\000\000\000\200?xww?\000\000\000\000\000\000\200?\300\273{?\000\000\000\000\000\000\200?\000\000\200?\000\000\000\000\370\377\177?\000\000\200?\000\000\000\000\270\273{?\000\000\200?\000\000\000\000pww?\000\000\200?\000\000\000\00003s?\000\000\200?\000\000\000\000\350\356n?\000\000\200?\000\000\000\000\250\252j?\000\000\200?\000\000\000\000`ff?\000\000\200?\000\000\000\000 \"b?\000\000\200?\000\000\000\000\330\335]?\000\000\200?\000\000\000\000\230\231Y?\000\000\200?\000\000\000\000PUU?\000\000\200?\000\000\000\000\020\021Q?\000\000\200?\000\000\000\000\310\314L?\000\000\200?\000\000\000\000\200\210H?\000\000\200?\000\000\000\000@DD?\000\000\200?\000\000\000\000\370\377??\000\000\200?\000\000\000\000\270\273;?\000\000\200?\000\000\000\000pw7?\000\000\200?\000\000\000\000033?\000\000\200?\000\000\000\000\350\356.?\000\000\200?\000\000\000\000\250\252*?\000\000\200?\000\000\000\000`f&?\000\000\200?\000\000\000\000 \"\"?\000\000\200?\000\000\000\000\330\335\035?\000\000\200?\000\000\000\000\230\231\031?\000\000\200?\000\000\000\000PU\025?\000\000\200?\000\000\000\000\020\021\021?\000\000\200?\000\000\000\000\310\314\014?\000\000\200?\000\000\000\000\200\210\010?\000\000\200?\000\000\000\000@D\004?\000\000\200?\000\000\000\000\360\377\377>\000\000\200?\000\000\000\000pw\367>\000\000\200?\000\000\000\000\340\356\356>\000\000\200?\000\000\000\000`f\346>\000\000\200?\000\000\000\000\320\335\335>\000\000\200?\000\000\000\000PU\325>\000\000\200?\000\000\000\000\300\314\314>\000\000\200?\000\000\000\000@D\304>\000\000\200?\000\000\000\000\260\273\273>\000\000\200?\000\000\000\00003\263>\000\000\200?\000\000\000\000\240\252\252>\000\000\200?\000\000\000\000 \"\242>\000\000\200?\000\000\000\000\220\231\231>\000\000\200?\000\000\000\000\000\021\221>\000\000\200?\000\000\000\000\200\210\210>\000\000\200?\000\000\000\000\340\377\177>\000\000\200?\000\000\000\000\340\356n>\000\000\200?\000\000\000\000\300\335]>\000\000\200?\000\000\000\000\300\314L>\000\000\200?\000\000\000\000\240\273;>\000\000\200?\000\000\000\000\240\252*>\000\000\200?\000\000\000\000\200\231\031>\000\000\200?\000\000\000\000\200\210\010>\000\000\200?\000\000\000\000\300\356\356=\000\000\200?\000\000\000\000\300\314\314=\000\000\200?\000\000\000\000\200\252\252=\000\000\200?\000\000\000\000@\210\210=\000\000\200?\000\000\000\000\200\314L=\000\000\200?\000\000\000\000\000\210\010=\000\000\200?\000\000\000\000\000\210\210<"
      }
    }
  }
}
node {
  name: "mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 180.0
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "Atan2"
  input: "mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.1415927410125732
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "mul"
  input: "truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 180.0
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "truediv"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_value/clip_value_min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "clip_by_value/clip_value_max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 360.0
      }
    }
  }
}
node {
  name: "clip_by_value"
  op: "ClipByValue"
  input: "add"
  input: "clip_by_value/clip_value_min"
  input: "clip_by_value/clip_value_max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "clip_by_value"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Cast"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "GatherV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "GatherV2"
  op: "GatherV2"
  input: "Const_1"
  input: "strided_slice"
  input: "GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "MSDeepDet/GatherNd_1"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "MSDeepDet/GatherNd_1"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "Atan2_1"
  op: "Atan2"
  input: "strided_slice_1"
  input: "strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^ConvOnlyResNet/block-1/conv1/biases/Assign"
  input: "^ConvOnlyResNet/block-1/conv1/weights/Assign"
  input: "^ConvOnlyResNet/block-1/conv2/biases/Assign"
  input: "^ConvOnlyResNet/block-1/conv2/weights/Assign"
  input: "^ConvOnlyResNet/block-1/mid-bn/beta/Assign"
  input: "^ConvOnlyResNet/block-1/mid-bn/gamma/Assign"
  input: "^ConvOnlyResNet/block-1/mid-bn/moving_mean/Assign"
  input: "^ConvOnlyResNet/block-1/mid-bn/moving_variance/Assign"
  input: "^ConvOnlyResNet/block-1/pre-bn/beta/Assign"
  input: "^ConvOnlyResNet/block-1/pre-bn/gamma/Assign"
  input: "^ConvOnlyResNet/block-1/pre-bn/moving_mean/Assign"
  input: "^ConvOnlyResNet/block-1/pre-bn/moving_variance/Assign"
  input: "^ConvOnlyResNet/block-2/conv1/biases/Assign"
  input: "^ConvOnlyResNet/block-2/conv1/weights/Assign"
  input: "^ConvOnlyResNet/block-2/conv2/biases/Assign"
  input: "^ConvOnlyResNet/block-2/conv2/weights/Assign"
  input: "^ConvOnlyResNet/block-2/mid-bn/beta/Assign"
  input: "^ConvOnlyResNet/block-2/mid-bn/gamma/Assign"
  input: "^ConvOnlyResNet/block-2/mid-bn/moving_mean/Assign"
  input: "^ConvOnlyResNet/block-2/mid-bn/moving_variance/Assign"
  input: "^ConvOnlyResNet/block-2/pre-bn/beta/Assign"
  input: "^ConvOnlyResNet/block-2/pre-bn/gamma/Assign"
  input: "^ConvOnlyResNet/block-2/pre-bn/moving_mean/Assign"
  input: "^ConvOnlyResNet/block-2/pre-bn/moving_variance/Assign"
  input: "^ConvOnlyResNet/block-3/conv1/biases/Assign"
  input: "^ConvOnlyResNet/block-3/conv1/weights/Assign"
  input: "^ConvOnlyResNet/block-3/conv2/biases/Assign"
  input: "^ConvOnlyResNet/block-3/conv2/weights/Assign"
  input: "^ConvOnlyResNet/block-3/mid-bn/beta/Assign"
  input: "^ConvOnlyResNet/block-3/mid-bn/gamma/Assign"
  input: "^ConvOnlyResNet/block-3/mid-bn/moving_mean/Assign"
  input: "^ConvOnlyResNet/block-3/mid-bn/moving_variance/Assign"
  input: "^ConvOnlyResNet/block-3/pre-bn/beta/Assign"
  input: "^ConvOnlyResNet/block-3/pre-bn/gamma/Assign"
  input: "^ConvOnlyResNet/block-3/pre-bn/moving_mean/Assign"
  input: "^ConvOnlyResNet/block-3/pre-bn/moving_variance/Assign"
  input: "^ConvOnlyResNet/fin-bn/beta/Assign"
  input: "^ConvOnlyResNet/fin-bn/gamma/Assign"
  input: "^ConvOnlyResNet/fin-bn/moving_mean/Assign"
  input: "^ConvOnlyResNet/fin-bn/moving_variance/Assign"
  input: "^ConvOnlyResNet/init_conv/biases/Assign"
  input: "^ConvOnlyResNet/init_conv/weights/Assign"
  input: "^ConvOnlyResNet/ori_conv/biases/Assign"
  input: "^ConvOnlyResNet/ori_conv/weights/Assign"
  input: "^ConvOnlyResNet/score_conv_0/biases/Assign"
  input: "^ConvOnlyResNet/score_conv_0/weights/Assign"
  input: "^ConvOnlyResNet/score_conv_1/biases/Assign"
  input: "^ConvOnlyResNet/score_conv_1/weights/Assign"
  input: "^ConvOnlyResNet/score_conv_2/biases/Assign"
  input: "^ConvOnlyResNet/score_conv_2/weights/Assign"
  input: "^ConvOnlyResNet/score_conv_3/biases/Assign"
  input: "^ConvOnlyResNet/score_conv_3/weights/Assign"
  input: "^ConvOnlyResNet/score_conv_4/biases/Assign"
  input: "^ConvOnlyResNet/score_conv_4/weights/Assign"
  input: "^SimpleDesc/bn1/beta/Assign"
  input: "^SimpleDesc/bn1/gamma/Assign"
  input: "^SimpleDesc/bn1/moving_mean/Assign"
  input: "^SimpleDesc/bn1/moving_variance/Assign"
  input: "^SimpleDesc/bn2/beta/Assign"
  input: "^SimpleDesc/bn2/gamma/Assign"
  input: "^SimpleDesc/bn2/moving_mean/Assign"
  input: "^SimpleDesc/bn2/moving_variance/Assign"
  input: "^SimpleDesc/bn3/beta/Assign"
  input: "^SimpleDesc/bn3/gamma/Assign"
  input: "^SimpleDesc/bn3/moving_mean/Assign"
  input: "^SimpleDesc/bn3/moving_variance/Assign"
  input: "^SimpleDesc/conv1/biases/Assign"
  input: "^SimpleDesc/conv1/weights/Assign"
  input: "^SimpleDesc/conv2/biases/Assign"
  input: "^SimpleDesc/conv2/weights/Assign"
  input: "^SimpleDesc/conv3/biases/Assign"
  input: "^SimpleDesc/conv3/weights/Assign"
  input: "^SimpleDesc/fc-bn1/beta/Assign"
  input: "^SimpleDesc/fc-bn1/gamma/Assign"
  input: "^SimpleDesc/fc-bn1/moving_mean/Assign"
  input: "^SimpleDesc/fc-bn1/moving_variance/Assign"
  input: "^SimpleDesc/fc1/biases/Assign"
  input: "^SimpleDesc/fc1/weights/Assign"
  input: "^SimpleDesc/fc2/biases/Assign"
  input: "^SimpleDesc/fc2/weights/Assign"
}
versions {
  producer: 26
}
